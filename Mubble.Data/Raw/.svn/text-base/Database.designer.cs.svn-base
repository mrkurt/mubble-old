#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mubble.Data.Raw
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="mubble")]
	public partial class DatabaseContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdminControl(AdminControl instance);
    partial void UpdateAdminControl(AdminControl instance);
    partial void DeleteAdminControl(AdminControl instance);
    partial void InsertTextBlock(TextBlock instance);
    partial void UpdateTextBlock(TextBlock instance);
    partial void DeleteTextBlock(TextBlock instance);
    partial void InsertAuthor(Author instance);
    partial void UpdateAuthor(Author instance);
    partial void DeleteAuthor(Author instance);
    partial void InsertContentItemAuthor(ContentItemAuthor instance);
    partial void UpdateContentItemAuthor(ContentItemAuthor instance);
    partial void DeleteContentItemAuthor(ContentItemAuthor instance);
    partial void InsertContentItem(ContentItem instance);
    partial void UpdateContentItem(ContentItem instance);
    partial void DeleteContentItem(ContentItem instance);
    partial void InsertContentType(ContentType instance);
    partial void UpdateContentType(ContentType instance);
    partial void DeleteContentType(ContentType instance);
    partial void InsertController(Controller instance);
    partial void UpdateController(Controller instance);
    partial void DeleteController(Controller instance);
    partial void InsertDiscussionProvider(DiscussionProvider instance);
    partial void UpdateDiscussionProvider(DiscussionProvider instance);
    partial void DeleteDiscussionProvider(DiscussionProvider instance);
    partial void InsertDiscussion(Discussion instance);
    partial void UpdateDiscussion(Discussion instance);
    partial void DeleteDiscussion(Discussion instance);
    partial void InsertFile(File instance);
    partial void UpdateFile(File instance);
    partial void DeleteFile(File instance);
    partial void InsertModuleControl(ModuleControl instance);
    partial void UpdateModuleControl(ModuleControl instance);
    partial void DeleteModuleControl(ModuleControl instance);
    partial void InsertModule(Module instance);
    partial void UpdateModule(Module instance);
    partial void DeleteModule(Module instance);
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    partial void InsertPermissionFlag(PermissionFlag instance);
    partial void UpdatePermissionFlag(PermissionFlag instance);
    partial void DeletePermissionFlag(PermissionFlag instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertRoute(Route instance);
    partial void UpdateRoute(Route instance);
    partial void DeleteRoute(Route instance);
    partial void InsertRssFeed(RssFeed instance);
    partial void UpdateRssFeed(RssFeed instance);
    partial void DeleteRssFeed(RssFeed instance);
    partial void InsertScheduledCommand(ScheduledCommand instance);
    partial void UpdateScheduledCommand(ScheduledCommand instance);
    partial void DeleteScheduledCommand(ScheduledCommand instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertTemplate(Template instance);
    partial void UpdateTemplate(Template instance);
    partial void DeleteTemplate(Template instance);
    partial void InsertUrlRedirect(UrlRedirect instance);
    partial void UpdateUrlRedirect(UrlRedirect instance);
    partial void DeleteUrlRedirect(UrlRedirect instance);
    #endregion
		
		public DatabaseContext() : 
				base(global::Mubble.Data.Properties.Settings.Default.mubbleConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AdminControl> AdminControls
		{
			get
			{
				return this.GetTable<AdminControl>();
			}
		}
		
		public System.Data.Linq.Table<TextBlock> TextBlocks
		{
			get
			{
				return this.GetTable<TextBlock>();
			}
		}
		
		public System.Data.Linq.Table<Author> Authors
		{
			get
			{
				return this.GetTable<Author>();
			}
		}
		
		public System.Data.Linq.Table<ContentItemAuthor> ContentItemAuthors
		{
			get
			{
				return this.GetTable<ContentItemAuthor>();
			}
		}
		
		public System.Data.Linq.Table<ContentItem> ContentItems
		{
			get
			{
				return this.GetTable<ContentItem>();
			}
		}
		
		public System.Data.Linq.Table<ContentType> ContentTypes
		{
			get
			{
				return this.GetTable<ContentType>();
			}
		}
		
		public System.Data.Linq.Table<Controller> Controllers
		{
			get
			{
				return this.GetTable<Controller>();
			}
		}
		
		public System.Data.Linq.Table<DiscussionProvider> DiscussionProviders
		{
			get
			{
				return this.GetTable<DiscussionProvider>();
			}
		}
		
		public System.Data.Linq.Table<Discussion> Discussions
		{
			get
			{
				return this.GetTable<Discussion>();
			}
		}
		
		public System.Data.Linq.Table<File> Files
		{
			get
			{
				return this.GetTable<File>();
			}
		}
		
		public System.Data.Linq.Table<ModuleControl> ModuleControls
		{
			get
			{
				return this.GetTable<ModuleControl>();
			}
		}
		
		public System.Data.Linq.Table<Module> Modules
		{
			get
			{
				return this.GetTable<Module>();
			}
		}
		
		public System.Data.Linq.Table<Page> Pages
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
		
		public System.Data.Linq.Table<PermissionFlag> PermissionFlags
		{
			get
			{
				return this.GetTable<PermissionFlag>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<Route> Routes
		{
			get
			{
				return this.GetTable<Route>();
			}
		}
		
		public System.Data.Linq.Table<RssFeed> RssFeeds
		{
			get
			{
				return this.GetTable<RssFeed>();
			}
		}
		
		public System.Data.Linq.Table<ScheduledCommand> ScheduledCommands
		{
			get
			{
				return this.GetTable<ScheduledCommand>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<Template> Templates
		{
			get
			{
				return this.GetTable<Template>();
			}
		}
		
		public System.Data.Linq.Table<UrlRedirect> UrlRedirects
		{
			get
			{
				return this.GetTable<UrlRedirect>();
			}
		}
	}
	
	[Table(Name="dbo.AdminControls")]
	public partial class AdminControl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _FileName;
		
		private int _Order;
		
		private bool _IsDefault;
		
		private System.Guid _ModuleControlID;
		
		private EntityRef<ModuleControl> _ModuleControl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    partial void OnModuleControlIDChanging(System.Guid value);
    partial void OnModuleControlIDChanged();
    #endregion
		
		public AdminControl()
		{
			this._ModuleControl = default(EntityRef<ModuleControl>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefault", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Column(Storage="_ModuleControlID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ModuleControlID
		{
			get
			{
				return this._ModuleControlID;
			}
			set
			{
				if ((this._ModuleControlID != value))
				{
					if (this._ModuleControl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleControlIDChanging(value);
					this.SendPropertyChanging();
					this._ModuleControlID = value;
					this.SendPropertyChanged("ModuleControlID");
					this.OnModuleControlIDChanged();
				}
			}
		}
		
		[Association(Name="ModuleControl_AdminControl", Storage="_ModuleControl", ThisKey="ModuleControlID", IsForeignKey=true)]
		public ModuleControl ModuleControl
		{
			get
			{
				return this._ModuleControl.Entity;
			}
			set
			{
				ModuleControl previousValue = this._ModuleControl.Entity;
				if (((previousValue != value) 
							|| (this._ModuleControl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ModuleControl.Entity = null;
						previousValue.AdminControls.Remove(this);
					}
					this._ModuleControl.Entity = value;
					if ((value != null))
					{
						value.AdminControls.Add(this);
						this._ModuleControlID = value.ID;
					}
					else
					{
						this._ModuleControlID = default(System.Guid);
					}
					this.SendPropertyChanged("ModuleControl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TextBlocks")]
	public partial class TextBlock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Title;
		
		private string _Excerpt;
		
		private string _Body;
		
		private EntitySet<ContentItem> _ContentItems;
		
		private EntitySet<Page> _Pages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnExcerptChanging(string value);
    partial void OnExcerptChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    #endregion
		
		public TextBlock()
		{
			this._ContentItems = new EntitySet<ContentItem>(new Action<ContentItem>(this.attach_ContentItems), new Action<ContentItem>(this.detach_ContentItems));
			this._Pages = new EntitySet<Page>(new Action<Page>(this.attach_Pages), new Action<Page>(this.detach_Pages));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Excerpt", DbType="NVarChar(MAX)")]
		public string Excerpt
		{
			get
			{
				return this._Excerpt;
			}
			set
			{
				if ((this._Excerpt != value))
				{
					this.OnExcerptChanging(value);
					this.SendPropertyChanging();
					this._Excerpt = value;
					this.SendPropertyChanged("Excerpt");
					this.OnExcerptChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NVarChar(MAX)")]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Association(Name="TextBlock_ContentItem", Storage="_ContentItems", OtherKey="TextBlockID")]
		public EntitySet<ContentItem> ContentItems
		{
			get
			{
				return this._ContentItems;
			}
			set
			{
				this._ContentItems.Assign(value);
			}
		}
		
		[Association(Name="TextBlock_Page", Storage="_Pages", OtherKey="TextBlockID")]
		public EntitySet<Page> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				this._Pages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContentItems(ContentItem entity)
		{
			this.SendPropertyChanging();
			entity.TextBlock = this;
		}
		
		private void detach_ContentItems(ContentItem entity)
		{
			this.SendPropertyChanging();
			entity.TextBlock = null;
		}
		
		private void attach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.TextBlock = this;
		}
		
		private void detach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.TextBlock = null;
		}
	}
	
	[Table(Name="dbo.Authors")]
	public partial class Author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _UserName;
		
		private string _Email;
		
		private string _Displayname;
		
		private string _Bio;
		
		private EntitySet<ContentItemAuthor> _ContentItemAuthors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDisplaynameChanging(string value);
    partial void OnDisplaynameChanged();
    partial void OnBioChanging(string value);
    partial void OnBioChanged();
    #endregion
		
		public Author()
		{
			this._ContentItemAuthors = new EntitySet<ContentItemAuthor>(new Action<ContentItemAuthor>(this.attach_ContentItemAuthors), new Action<ContentItemAuthor>(this.detach_ContentItemAuthors));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Displayname", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Displayname
		{
			get
			{
				return this._Displayname;
			}
			set
			{
				if ((this._Displayname != value))
				{
					this.OnDisplaynameChanging(value);
					this.SendPropertyChanging();
					this._Displayname = value;
					this.SendPropertyChanged("Displayname");
					this.OnDisplaynameChanged();
				}
			}
		}
		
		[Column(Storage="_Bio", DbType="NVarChar(MAX)")]
		public string Bio
		{
			get
			{
				return this._Bio;
			}
			set
			{
				if ((this._Bio != value))
				{
					this.OnBioChanging(value);
					this.SendPropertyChanging();
					this._Bio = value;
					this.SendPropertyChanged("Bio");
					this.OnBioChanged();
				}
			}
		}
		
		[Association(Name="Author_ContentItemAuthor", Storage="_ContentItemAuthors", OtherKey="AuthorID")]
		public EntitySet<ContentItemAuthor> ContentItemAuthors
		{
			get
			{
				return this._ContentItemAuthors;
			}
			set
			{
				this._ContentItemAuthors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContentItemAuthors(ContentItemAuthor entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_ContentItemAuthors(ContentItemAuthor entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
	}
	
	[Table(Name="dbo.ContentItemAuthors")]
	public partial class ContentItemAuthor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ContentItemID;
		
		private System.Guid _AuthorID;
		
		private EntityRef<Author> _Author;
		
		private EntityRef<ContentItem> _ContentItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContentItemIDChanging(System.Guid value);
    partial void OnContentItemIDChanged();
    partial void OnAuthorIDChanging(System.Guid value);
    partial void OnAuthorIDChanged();
    #endregion
		
		public ContentItemAuthor()
		{
			this._Author = default(EntityRef<Author>);
			this._ContentItem = default(EntityRef<ContentItem>);
			OnCreated();
		}
		
		[Column(Storage="_ContentItemID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ContentItemID
		{
			get
			{
				return this._ContentItemID;
			}
			set
			{
				if ((this._ContentItemID != value))
				{
					if (this._ContentItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentItemIDChanging(value);
					this.SendPropertyChanging();
					this._ContentItemID = value;
					this.SendPropertyChanged("ContentItemID");
					this.OnContentItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					if (this._Author.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[Association(Name="Author_ContentItemAuthor", Storage="_Author", ThisKey="AuthorID", IsForeignKey=true)]
		public Author Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Author previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.ContentItemAuthors.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.ContentItemAuthors.Add(this);
						this._AuthorID = value.ID;
					}
					else
					{
						this._AuthorID = default(System.Guid);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[Association(Name="ContentItem_ContentItemAuthor", Storage="_ContentItem", ThisKey="ContentItemID", IsForeignKey=true)]
		public ContentItem ContentItem
		{
			get
			{
				return this._ContentItem.Entity;
			}
			set
			{
				ContentItem previousValue = this._ContentItem.Entity;
				if (((previousValue != value) 
							|| (this._ContentItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentItem.Entity = null;
						previousValue.ContentItemAuthors.Remove(this);
					}
					this._ContentItem.Entity = value;
					if ((value != null))
					{
						value.ContentItemAuthors.Add(this);
						this._ContentItemID = value.ID;
					}
					else
					{
						this._ContentItemID = default(System.Guid);
					}
					this.SendPropertyChanged("ContentItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ContentItems")]
	public partial class ContentItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _ContentItemID;
		
		private string _FileName;
		
		private string _Path;
		
		private System.DateTime _PublishDate;
		
		private int _Status;
		
		private System.Guid _ContentTypeID;
		
		private System.Nullable<System.Guid> _TextBlockID;
		
		private EntitySet<ContentItemAuthor> _ContentItemAuthors;
		
		private EntitySet<ContentItem> _ContentItems;
		
		private EntityRef<Controller> _Controller;
		
		private EntitySet<Discussion> _Discussions;
		
		private EntitySet<File> _Files;
		
		private EntitySet<Page> _Pages;
		
		private EntitySet<ScheduledCommand> _ScheduledCommands;
		
		private EntitySet<Tag> _Tags;
		
		private EntitySet<UrlRedirect> _UrlRedirects;
		
		private EntityRef<ContentItem> _ContentItem1;
		
		private EntityRef<TextBlock> _TextBlock;
		
		private EntityRef<ContentType> _ContentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnContentItemIDChanging(System.Nullable<System.Guid> value);
    partial void OnContentItemIDChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnPublishDateChanging(System.DateTime value);
    partial void OnPublishDateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnContentTypeIDChanging(System.Guid value);
    partial void OnContentTypeIDChanged();
    partial void OnTextBlockIDChanging(System.Nullable<System.Guid> value);
    partial void OnTextBlockIDChanged();
    #endregion
		
		public ContentItem()
		{
			this._ContentItemAuthors = new EntitySet<ContentItemAuthor>(new Action<ContentItemAuthor>(this.attach_ContentItemAuthors), new Action<ContentItemAuthor>(this.detach_ContentItemAuthors));
			this._ContentItems = new EntitySet<ContentItem>(new Action<ContentItem>(this.attach_ContentItems), new Action<ContentItem>(this.detach_ContentItems));
			this._Controller = default(EntityRef<Controller>);
			this._Discussions = new EntitySet<Discussion>(new Action<Discussion>(this.attach_Discussions), new Action<Discussion>(this.detach_Discussions));
			this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
			this._Pages = new EntitySet<Page>(new Action<Page>(this.attach_Pages), new Action<Page>(this.detach_Pages));
			this._ScheduledCommands = new EntitySet<ScheduledCommand>(new Action<ScheduledCommand>(this.attach_ScheduledCommands), new Action<ScheduledCommand>(this.detach_ScheduledCommands));
			this._Tags = new EntitySet<Tag>(new Action<Tag>(this.attach_Tags), new Action<Tag>(this.detach_Tags));
			this._UrlRedirects = new EntitySet<UrlRedirect>(new Action<UrlRedirect>(this.attach_UrlRedirects), new Action<UrlRedirect>(this.detach_UrlRedirects));
			this._ContentItem1 = default(EntityRef<ContentItem>);
			this._TextBlock = default(EntityRef<TextBlock>);
			this._ContentType = default(EntityRef<ContentType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContentItemID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ContentItemID
		{
			get
			{
				return this._ContentItemID;
			}
			set
			{
				if ((this._ContentItemID != value))
				{
					if (this._ContentItem1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentItemIDChanging(value);
					this.SendPropertyChanging();
					this._ContentItemID = value;
					this.SendPropertyChanged("ContentItemID");
					this.OnContentItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(4000) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Storage="_PublishDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_ContentTypeID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ContentTypeID
		{
			get
			{
				return this._ContentTypeID;
			}
			set
			{
				if ((this._ContentTypeID != value))
				{
					if (this._ContentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContentTypeID = value;
					this.SendPropertyChanged("ContentTypeID");
					this.OnContentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_TextBlockID", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> TextBlockID
		{
			get
			{
				return this._TextBlockID;
			}
			set
			{
				if ((this._TextBlockID != value))
				{
					if (this._TextBlock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextBlockIDChanging(value);
					this.SendPropertyChanging();
					this._TextBlockID = value;
					this.SendPropertyChanged("TextBlockID");
					this.OnTextBlockIDChanged();
				}
			}
		}
		
		[Association(Name="ContentItem_ContentItemAuthor", Storage="_ContentItemAuthors", OtherKey="ContentItemID")]
		public EntitySet<ContentItemAuthor> ContentItemAuthors
		{
			get
			{
				return this._ContentItemAuthors;
			}
			set
			{
				this._ContentItemAuthors.Assign(value);
			}
		}
		
		[Association(Name="ContentItem_ContentItem", Storage="_ContentItems", OtherKey="ContentItemID")]
		public EntitySet<ContentItem> ContentItems
		{
			get
			{
				return this._ContentItems;
			}
			set
			{
				this._ContentItems.Assign(value);
			}
		}
		
		[Association(Name="ContentItem_Controller", Storage="_Controller", ThisKey="ID", IsUnique=true, IsForeignKey=false)]
		public Controller Controller
		{
			get
			{
				return this._Controller.Entity;
			}
			set
			{
				Controller previousValue = this._Controller.Entity;
				if (((previousValue != value) 
							|| (this._Controller.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Controller.Entity = null;
						previousValue.ContentItem = null;
					}
					this._Controller.Entity = value;
					if ((value != null))
					{
						value.ContentItem = this;
					}
					this.SendPropertyChanged("Controller");
				}
			}
		}
		
		[Association(Name="ContentItem_Discussion", Storage="_Discussions", OtherKey="ContentItemID")]
		public EntitySet<Discussion> Discussions
		{
			get
			{
				return this._Discussions;
			}
			set
			{
				this._Discussions.Assign(value);
			}
		}
		
		[Association(Name="ContentItem_File", Storage="_Files", OtherKey="ContentItemID")]
		public EntitySet<File> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}
		
		[Association(Name="ContentItem_Page", Storage="_Pages", OtherKey="ContentItemID")]
		public EntitySet<Page> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				this._Pages.Assign(value);
			}
		}
		
		[Association(Name="ContentItem_ScheduledCommand", Storage="_ScheduledCommands", OtherKey="ContentItemID")]
		public EntitySet<ScheduledCommand> ScheduledCommands
		{
			get
			{
				return this._ScheduledCommands;
			}
			set
			{
				this._ScheduledCommands.Assign(value);
			}
		}
		
		[Association(Name="ContentItem_Tag", Storage="_Tags", OtherKey="ContentItemID")]
		public EntitySet<Tag> Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				this._Tags.Assign(value);
			}
		}
		
		[Association(Name="ContentItem_UrlRedirect", Storage="_UrlRedirects", OtherKey="ContentItemID")]
		public EntitySet<UrlRedirect> UrlRedirects
		{
			get
			{
				return this._UrlRedirects;
			}
			set
			{
				this._UrlRedirects.Assign(value);
			}
		}
		
		[Association(Name="ContentItem_ContentItem", Storage="_ContentItem1", ThisKey="ContentItemID", IsForeignKey=true)]
		public ContentItem ContentItem1
		{
			get
			{
				return this._ContentItem1.Entity;
			}
			set
			{
				ContentItem previousValue = this._ContentItem1.Entity;
				if (((previousValue != value) 
							|| (this._ContentItem1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentItem1.Entity = null;
						previousValue.ContentItems.Remove(this);
					}
					this._ContentItem1.Entity = value;
					if ((value != null))
					{
						value.ContentItems.Add(this);
						this._ContentItemID = value.ID;
					}
					else
					{
						this._ContentItemID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ContentItem1");
				}
			}
		}
		
		[Association(Name="TextBlock_ContentItem", Storage="_TextBlock", ThisKey="TextBlockID", IsForeignKey=true)]
		public TextBlock TextBlock
		{
			get
			{
				return this._TextBlock.Entity;
			}
			set
			{
				TextBlock previousValue = this._TextBlock.Entity;
				if (((previousValue != value) 
							|| (this._TextBlock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TextBlock.Entity = null;
						previousValue.ContentItems.Remove(this);
					}
					this._TextBlock.Entity = value;
					if ((value != null))
					{
						value.ContentItems.Add(this);
						this._TextBlockID = value.ID;
					}
					else
					{
						this._TextBlockID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("TextBlock");
				}
			}
		}
		
		[Association(Name="ContentType_ContentItem", Storage="_ContentType", ThisKey="ContentTypeID", IsForeignKey=true)]
		public ContentType ContentType
		{
			get
			{
				return this._ContentType.Entity;
			}
			set
			{
				ContentType previousValue = this._ContentType.Entity;
				if (((previousValue != value) 
							|| (this._ContentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentType.Entity = null;
						previousValue.ContentItems.Remove(this);
					}
					this._ContentType.Entity = value;
					if ((value != null))
					{
						value.ContentItems.Add(this);
						this._ContentTypeID = value.ID;
					}
					else
					{
						this._ContentTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("ContentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContentItemAuthors(ContentItemAuthor entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem = this;
		}
		
		private void detach_ContentItemAuthors(ContentItemAuthor entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem = null;
		}
		
		private void attach_ContentItems(ContentItem entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem1 = this;
		}
		
		private void detach_ContentItems(ContentItem entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem1 = null;
		}
		
		private void attach_Discussions(Discussion entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem = this;
		}
		
		private void detach_Discussions(Discussion entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem = null;
		}
		
		private void attach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem = this;
		}
		
		private void detach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem = null;
		}
		
		private void attach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem = this;
		}
		
		private void detach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem = null;
		}
		
		private void attach_ScheduledCommands(ScheduledCommand entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem = this;
		}
		
		private void detach_ScheduledCommands(ScheduledCommand entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem = null;
		}
		
		private void attach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem = this;
		}
		
		private void detach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem = null;
		}
		
		private void attach_UrlRedirects(UrlRedirect entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem = this;
		}
		
		private void detach_UrlRedirects(UrlRedirect entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem = null;
		}
	}
	
	[Table(Name="dbo.ContentTypes")]
	public partial class ContentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _SystemType;
		
		private string _ActiveObjectType;
		
		private EntitySet<ContentItem> _ContentItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSystemTypeChanging(string value);
    partial void OnSystemTypeChanged();
    partial void OnActiveObjectTypeChanging(string value);
    partial void OnActiveObjectTypeChanged();
    #endregion
		
		public ContentType()
		{
			this._ContentItems = new EntitySet<ContentItem>(new Action<ContentItem>(this.attach_ContentItems), new Action<ContentItem>(this.detach_ContentItems));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_SystemType", DbType="NVarChar(255)")]
		public string SystemType
		{
			get
			{
				return this._SystemType;
			}
			set
			{
				if ((this._SystemType != value))
				{
					this.OnSystemTypeChanging(value);
					this.SendPropertyChanging();
					this._SystemType = value;
					this.SendPropertyChanged("SystemType");
					this.OnSystemTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ActiveObjectType", DbType="NVarChar(255)")]
		public string ActiveObjectType
		{
			get
			{
				return this._ActiveObjectType;
			}
			set
			{
				if ((this._ActiveObjectType != value))
				{
					this.OnActiveObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._ActiveObjectType = value;
					this.SendPropertyChanged("ActiveObjectType");
					this.OnActiveObjectTypeChanged();
				}
			}
		}
		
		[Association(Name="ContentType_ContentItem", Storage="_ContentItems", OtherKey="ContentTypeID")]
		public EntitySet<ContentItem> ContentItems
		{
			get
			{
				return this._ContentItems;
			}
			set
			{
				this._ContentItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContentItems(ContentItem entity)
		{
			this.SendPropertyChanging();
			entity.ContentType = this;
		}
		
		private void detach_ContentItems(ContentItem entity)
		{
			this.SendPropertyChanging();
			entity.ContentType = null;
		}
	}
	
	[Table(Name="dbo.Controllers")]
	public partial class Controller : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ContentItemID;
		
		private System.Guid _TemplateID;
		
		private string _TemplateControl;
		
		private System.Guid _ModuleControlID;
		
		private string _ModuleControlView;
		
		private System.Nullable<System.Guid> _RouteID;
		
		private bool _IsContent;
		
		private bool _IsContentContainer;
		
		private string _Settings;
		
		private EntitySet<Permission> _Permissions;
		
		private EntitySet<RssFeed> _RssFeeds;
		
		private EntityRef<ContentItem> _ContentItem;
		
		private EntityRef<ModuleControl> _ModuleControl;
		
		private EntityRef<Template> _Template;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContentItemIDChanging(System.Guid value);
    partial void OnContentItemIDChanged();
    partial void OnTemplateIDChanging(System.Guid value);
    partial void OnTemplateIDChanged();
    partial void OnTemplateControlChanging(string value);
    partial void OnTemplateControlChanged();
    partial void OnModuleControlIDChanging(System.Guid value);
    partial void OnModuleControlIDChanged();
    partial void OnModuleControlViewChanging(string value);
    partial void OnModuleControlViewChanged();
    partial void OnRouteIDChanging(System.Nullable<System.Guid> value);
    partial void OnRouteIDChanged();
    partial void OnIsContentChanging(bool value);
    partial void OnIsContentChanged();
    partial void OnIsContentContainerChanging(bool value);
    partial void OnIsContentContainerChanged();
    partial void OnSettingsChanging(string value);
    partial void OnSettingsChanged();
    #endregion
		
		public Controller()
		{
			this._Permissions = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions), new Action<Permission>(this.detach_Permissions));
			this._RssFeeds = new EntitySet<RssFeed>(new Action<RssFeed>(this.attach_RssFeeds), new Action<RssFeed>(this.detach_RssFeeds));
			this._ContentItem = default(EntityRef<ContentItem>);
			this._ModuleControl = default(EntityRef<ModuleControl>);
			this._Template = default(EntityRef<Template>);
			OnCreated();
		}
		
		[Column(Storage="_ContentItemID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ContentItemID
		{
			get
			{
				return this._ContentItemID;
			}
			set
			{
				if ((this._ContentItemID != value))
				{
					if (this._ContentItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentItemIDChanging(value);
					this.SendPropertyChanging();
					this._ContentItemID = value;
					this.SendPropertyChanged("ContentItemID");
					this.OnContentItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_TemplateID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid TemplateID
		{
			get
			{
				return this._TemplateID;
			}
			set
			{
				if ((this._TemplateID != value))
				{
					if (this._Template.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTemplateIDChanging(value);
					this.SendPropertyChanging();
					this._TemplateID = value;
					this.SendPropertyChanged("TemplateID");
					this.OnTemplateIDChanged();
				}
			}
		}
		
		[Column(Storage="_TemplateControl", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TemplateControl
		{
			get
			{
				return this._TemplateControl;
			}
			set
			{
				if ((this._TemplateControl != value))
				{
					this.OnTemplateControlChanging(value);
					this.SendPropertyChanging();
					this._TemplateControl = value;
					this.SendPropertyChanged("TemplateControl");
					this.OnTemplateControlChanged();
				}
			}
		}
		
		[Column(Storage="_ModuleControlID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ModuleControlID
		{
			get
			{
				return this._ModuleControlID;
			}
			set
			{
				if ((this._ModuleControlID != value))
				{
					if (this._ModuleControl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleControlIDChanging(value);
					this.SendPropertyChanging();
					this._ModuleControlID = value;
					this.SendPropertyChanged("ModuleControlID");
					this.OnModuleControlIDChanged();
				}
			}
		}
		
		[Column(Storage="_ModuleControlView", DbType="NVarChar(255)")]
		public string ModuleControlView
		{
			get
			{
				return this._ModuleControlView;
			}
			set
			{
				if ((this._ModuleControlView != value))
				{
					this.OnModuleControlViewChanging(value);
					this.SendPropertyChanging();
					this._ModuleControlView = value;
					this.SendPropertyChanged("ModuleControlView");
					this.OnModuleControlViewChanged();
				}
			}
		}
		
		[Column(Storage="_RouteID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RouteID
		{
			get
			{
				return this._RouteID;
			}
			set
			{
				if ((this._RouteID != value))
				{
					this.OnRouteIDChanging(value);
					this.SendPropertyChanging();
					this._RouteID = value;
					this.SendPropertyChanged("RouteID");
					this.OnRouteIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsContent", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsContent
		{
			get
			{
				return this._IsContent;
			}
			set
			{
				if ((this._IsContent != value))
				{
					this.OnIsContentChanging(value);
					this.SendPropertyChanging();
					this._IsContent = value;
					this.SendPropertyChanged("IsContent");
					this.OnIsContentChanged();
				}
			}
		}
		
		[Column(Storage="_IsContentContainer", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsContentContainer
		{
			get
			{
				return this._IsContentContainer;
			}
			set
			{
				if ((this._IsContentContainer != value))
				{
					this.OnIsContentContainerChanging(value);
					this.SendPropertyChanging();
					this._IsContentContainer = value;
					this.SendPropertyChanged("IsContentContainer");
					this.OnIsContentContainerChanged();
				}
			}
		}
		
		[Column(Storage="_Settings", DbType="NVarChar(MAX)")]
		public string Settings
		{
			get
			{
				return this._Settings;
			}
			set
			{
				if ((this._Settings != value))
				{
					this.OnSettingsChanging(value);
					this.SendPropertyChanging();
					this._Settings = value;
					this.SendPropertyChanged("Settings");
					this.OnSettingsChanged();
				}
			}
		}
		
		[Association(Name="Controller_Permission", Storage="_Permissions", OtherKey="ControllerID")]
		public EntitySet<Permission> Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				this._Permissions.Assign(value);
			}
		}
		
		[Association(Name="Controller_RssFeed", Storage="_RssFeeds", OtherKey="ControllerID")]
		public EntitySet<RssFeed> RssFeeds
		{
			get
			{
				return this._RssFeeds;
			}
			set
			{
				this._RssFeeds.Assign(value);
			}
		}
		
		[Association(Name="ContentItem_Controller", Storage="_ContentItem", ThisKey="ContentItemID", IsForeignKey=true)]
		public ContentItem ContentItem
		{
			get
			{
				return this._ContentItem.Entity;
			}
			set
			{
				ContentItem previousValue = this._ContentItem.Entity;
				if (((previousValue != value) 
							|| (this._ContentItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentItem.Entity = null;
						previousValue.Controller = null;
					}
					this._ContentItem.Entity = value;
					if ((value != null))
					{
						value.Controller = this;
						this._ContentItemID = value.ID;
					}
					else
					{
						this._ContentItemID = default(System.Guid);
					}
					this.SendPropertyChanged("ContentItem");
				}
			}
		}
		
		[Association(Name="ModuleControl_Controller", Storage="_ModuleControl", ThisKey="ModuleControlID", IsForeignKey=true)]
		public ModuleControl ModuleControl
		{
			get
			{
				return this._ModuleControl.Entity;
			}
			set
			{
				ModuleControl previousValue = this._ModuleControl.Entity;
				if (((previousValue != value) 
							|| (this._ModuleControl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ModuleControl.Entity = null;
						previousValue.Controllers.Remove(this);
					}
					this._ModuleControl.Entity = value;
					if ((value != null))
					{
						value.Controllers.Add(this);
						this._ModuleControlID = value.ID;
					}
					else
					{
						this._ModuleControlID = default(System.Guid);
					}
					this.SendPropertyChanged("ModuleControl");
				}
			}
		}
		
		[Association(Name="Template_Controller", Storage="_Template", ThisKey="TemplateID", IsForeignKey=true)]
		public Template Template
		{
			get
			{
				return this._Template.Entity;
			}
			set
			{
				Template previousValue = this._Template.Entity;
				if (((previousValue != value) 
							|| (this._Template.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Template.Entity = null;
						previousValue.Controllers.Remove(this);
					}
					this._Template.Entity = value;
					if ((value != null))
					{
						value.Controllers.Add(this);
						this._TemplateID = value.ID;
					}
					else
					{
						this._TemplateID = default(System.Guid);
					}
					this.SendPropertyChanged("Template");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Controller = this;
		}
		
		private void detach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Controller = null;
		}
		
		private void attach_RssFeeds(RssFeed entity)
		{
			this.SendPropertyChanging();
			entity.Controller = this;
		}
		
		private void detach_RssFeeds(RssFeed entity)
		{
			this.SendPropertyChanging();
			entity.Controller = null;
		}
	}
	
	[Table(Name="dbo.DiscussionProviders")]
	public partial class DiscussionProvider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _ActiveObjectType;
		
		private string _Settings;
		
		private bool _IsDefault;
		
		private EntitySet<Discussion> _Discussions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveObjectTypeChanging(string value);
    partial void OnActiveObjectTypeChanged();
    partial void OnSettingsChanging(string value);
    partial void OnSettingsChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    #endregion
		
		public DiscussionProvider()
		{
			this._Discussions = new EntitySet<Discussion>(new Action<Discussion>(this.attach_Discussions), new Action<Discussion>(this.detach_Discussions));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ActiveObjectType", DbType="NVarChar(255)")]
		public string ActiveObjectType
		{
			get
			{
				return this._ActiveObjectType;
			}
			set
			{
				if ((this._ActiveObjectType != value))
				{
					this.OnActiveObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._ActiveObjectType = value;
					this.SendPropertyChanged("ActiveObjectType");
					this.OnActiveObjectTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Settings", DbType="NVarChar(MAX)")]
		public string Settings
		{
			get
			{
				return this._Settings;
			}
			set
			{
				if ((this._Settings != value))
				{
					this.OnSettingsChanging(value);
					this.SendPropertyChanging();
					this._Settings = value;
					this.SendPropertyChanged("Settings");
					this.OnSettingsChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefault", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Association(Name="DiscussionProvider_Discussion", Storage="_Discussions", OtherKey="DiscussionProviderID")]
		public EntitySet<Discussion> Discussions
		{
			get
			{
				return this._Discussions;
			}
			set
			{
				this._Discussions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Discussions(Discussion entity)
		{
			this.SendPropertyChanging();
			entity.DiscussionProvider = this;
		}
		
		private void detach_Discussions(Discussion entity)
		{
			this.SendPropertyChanging();
			entity.DiscussionProvider = null;
		}
	}
	
	[Table(Name="dbo.Discussions")]
	public partial class Discussion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ContentItemID;
		
		private System.Guid _DiscussionProviderID;
		
		private string _DiscussionLink;
		
		private int _Status;
		
		private string _LastStatusMessage;
		
		private int _CommentCount;
		
		private EntityRef<ContentItem> _ContentItem;
		
		private EntityRef<DiscussionProvider> _DiscussionProvider;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnContentItemIDChanging(System.Guid value);
    partial void OnContentItemIDChanged();
    partial void OnDiscussionProviderIDChanging(System.Guid value);
    partial void OnDiscussionProviderIDChanged();
    partial void OnDiscussionLinkChanging(string value);
    partial void OnDiscussionLinkChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnLastStatusMessageChanging(string value);
    partial void OnLastStatusMessageChanged();
    partial void OnCommentCountChanging(int value);
    partial void OnCommentCountChanged();
    #endregion
		
		public Discussion()
		{
			this._ContentItem = default(EntityRef<ContentItem>);
			this._DiscussionProvider = default(EntityRef<DiscussionProvider>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContentItemID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ContentItemID
		{
			get
			{
				return this._ContentItemID;
			}
			set
			{
				if ((this._ContentItemID != value))
				{
					if (this._ContentItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentItemIDChanging(value);
					this.SendPropertyChanging();
					this._ContentItemID = value;
					this.SendPropertyChanged("ContentItemID");
					this.OnContentItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_DiscussionProviderID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid DiscussionProviderID
		{
			get
			{
				return this._DiscussionProviderID;
			}
			set
			{
				if ((this._DiscussionProviderID != value))
				{
					if (this._DiscussionProvider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDiscussionProviderIDChanging(value);
					this.SendPropertyChanging();
					this._DiscussionProviderID = value;
					this.SendPropertyChanged("DiscussionProviderID");
					this.OnDiscussionProviderIDChanged();
				}
			}
		}
		
		[Column(Storage="_DiscussionLink", DbType="NVarChar(255)")]
		public string DiscussionLink
		{
			get
			{
				return this._DiscussionLink;
			}
			set
			{
				if ((this._DiscussionLink != value))
				{
					this.OnDiscussionLinkChanging(value);
					this.SendPropertyChanging();
					this._DiscussionLink = value;
					this.SendPropertyChanged("DiscussionLink");
					this.OnDiscussionLinkChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_LastStatusMessage", DbType="NVarChar(MAX)")]
		public string LastStatusMessage
		{
			get
			{
				return this._LastStatusMessage;
			}
			set
			{
				if ((this._LastStatusMessage != value))
				{
					this.OnLastStatusMessageChanging(value);
					this.SendPropertyChanging();
					this._LastStatusMessage = value;
					this.SendPropertyChanged("LastStatusMessage");
					this.OnLastStatusMessageChanged();
				}
			}
		}
		
		[Column(Storage="_CommentCount", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CommentCount
		{
			get
			{
				return this._CommentCount;
			}
			set
			{
				if ((this._CommentCount != value))
				{
					this.OnCommentCountChanging(value);
					this.SendPropertyChanging();
					this._CommentCount = value;
					this.SendPropertyChanged("CommentCount");
					this.OnCommentCountChanged();
				}
			}
		}
		
		[Association(Name="ContentItem_Discussion", Storage="_ContentItem", ThisKey="ContentItemID", IsForeignKey=true)]
		public ContentItem ContentItem
		{
			get
			{
				return this._ContentItem.Entity;
			}
			set
			{
				ContentItem previousValue = this._ContentItem.Entity;
				if (((previousValue != value) 
							|| (this._ContentItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentItem.Entity = null;
						previousValue.Discussions.Remove(this);
					}
					this._ContentItem.Entity = value;
					if ((value != null))
					{
						value.Discussions.Add(this);
						this._ContentItemID = value.ID;
					}
					else
					{
						this._ContentItemID = default(System.Guid);
					}
					this.SendPropertyChanged("ContentItem");
				}
			}
		}
		
		[Association(Name="DiscussionProvider_Discussion", Storage="_DiscussionProvider", ThisKey="DiscussionProviderID", IsForeignKey=true)]
		public DiscussionProvider DiscussionProvider
		{
			get
			{
				return this._DiscussionProvider.Entity;
			}
			set
			{
				DiscussionProvider previousValue = this._DiscussionProvider.Entity;
				if (((previousValue != value) 
							|| (this._DiscussionProvider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DiscussionProvider.Entity = null;
						previousValue.Discussions.Remove(this);
					}
					this._DiscussionProvider.Entity = value;
					if ((value != null))
					{
						value.Discussions.Add(this);
						this._DiscussionProviderID = value.ID;
					}
					else
					{
						this._DiscussionProviderID = default(System.Guid);
					}
					this.SendPropertyChanged("DiscussionProvider");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Files")]
	public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ContentItemID;
		
		private string _Name;
		
		private string _FileName;
		
		private string _PhysicalPath;
		
		private string _MediaType;
		
		private string _MediaSubType;
		
		private EntityRef<ContentItem> _ContentItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnContentItemIDChanging(System.Guid value);
    partial void OnContentItemIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnPhysicalPathChanging(string value);
    partial void OnPhysicalPathChanged();
    partial void OnMediaTypeChanging(string value);
    partial void OnMediaTypeChanged();
    partial void OnMediaSubTypeChanging(string value);
    partial void OnMediaSubTypeChanged();
    #endregion
		
		public File()
		{
			this._ContentItem = default(EntityRef<ContentItem>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContentItemID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ContentItemID
		{
			get
			{
				return this._ContentItemID;
			}
			set
			{
				if ((this._ContentItemID != value))
				{
					if (this._ContentItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentItemIDChanging(value);
					this.SendPropertyChanging();
					this._ContentItemID = value;
					this.SendPropertyChanged("ContentItemID");
					this.OnContentItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_PhysicalPath", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PhysicalPath
		{
			get
			{
				return this._PhysicalPath;
			}
			set
			{
				if ((this._PhysicalPath != value))
				{
					this.OnPhysicalPathChanging(value);
					this.SendPropertyChanging();
					this._PhysicalPath = value;
					this.SendPropertyChanged("PhysicalPath");
					this.OnPhysicalPathChanged();
				}
			}
		}
		
		[Column(Storage="_MediaType", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MediaType
		{
			get
			{
				return this._MediaType;
			}
			set
			{
				if ((this._MediaType != value))
				{
					this.OnMediaTypeChanging(value);
					this.SendPropertyChanging();
					this._MediaType = value;
					this.SendPropertyChanged("MediaType");
					this.OnMediaTypeChanged();
				}
			}
		}
		
		[Column(Storage="_MediaSubType", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MediaSubType
		{
			get
			{
				return this._MediaSubType;
			}
			set
			{
				if ((this._MediaSubType != value))
				{
					this.OnMediaSubTypeChanging(value);
					this.SendPropertyChanging();
					this._MediaSubType = value;
					this.SendPropertyChanged("MediaSubType");
					this.OnMediaSubTypeChanged();
				}
			}
		}
		
		[Association(Name="ContentItem_File", Storage="_ContentItem", ThisKey="ContentItemID", IsForeignKey=true)]
		public ContentItem ContentItem
		{
			get
			{
				return this._ContentItem.Entity;
			}
			set
			{
				ContentItem previousValue = this._ContentItem.Entity;
				if (((previousValue != value) 
							|| (this._ContentItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentItem.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._ContentItem.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._ContentItemID = value.ID;
					}
					else
					{
						this._ContentItemID = default(System.Guid);
					}
					this.SendPropertyChanged("ContentItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ModuleControls")]
	public partial class ModuleControl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<int> _Order;
		
		private string _Name;
		
		private string _FileName;
		
		private string _Type;
		
		private System.Guid _ModuleID;
		
		private string _ControllerActiveObjectType;
		
		private System.Nullable<bool> _IsContent;
		
		private System.Nullable<bool> _IsContentContainer;
		
		private EntitySet<AdminControl> _AdminControls;
		
		private EntitySet<Controller> _Controllers;
		
		private EntitySet<Route> _Routes;
		
		private EntityRef<Module> _Module;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnOrderChanging(System.Nullable<int> value);
    partial void OnOrderChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnModuleIDChanging(System.Guid value);
    partial void OnModuleIDChanged();
    partial void OnControllerActiveObjectTypeChanging(string value);
    partial void OnControllerActiveObjectTypeChanged();
    partial void OnIsContentChanging(System.Nullable<bool> value);
    partial void OnIsContentChanged();
    partial void OnIsContentContainerChanging(System.Nullable<bool> value);
    partial void OnIsContentContainerChanged();
    #endregion
		
		public ModuleControl()
		{
			this._AdminControls = new EntitySet<AdminControl>(new Action<AdminControl>(this.attach_AdminControls), new Action<AdminControl>(this.detach_AdminControls));
			this._Controllers = new EntitySet<Controller>(new Action<Controller>(this.attach_Controllers), new Action<Controller>(this.detach_Controllers));
			this._Routes = new EntitySet<Route>(new Action<Route>(this.attach_Routes), new Action<Route>(this.detach_Routes));
			this._Module = default(EntityRef<Module>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="Int")]
		public System.Nullable<int> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(255)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ModuleID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ModuleID
		{
			get
			{
				return this._ModuleID;
			}
			set
			{
				if ((this._ModuleID != value))
				{
					if (this._Module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleIDChanging(value);
					this.SendPropertyChanging();
					this._ModuleID = value;
					this.SendPropertyChanged("ModuleID");
					this.OnModuleIDChanged();
				}
			}
		}
		
		[Column(Storage="_ControllerActiveObjectType", DbType="NVarChar(255)")]
		public string ControllerActiveObjectType
		{
			get
			{
				return this._ControllerActiveObjectType;
			}
			set
			{
				if ((this._ControllerActiveObjectType != value))
				{
					this.OnControllerActiveObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._ControllerActiveObjectType = value;
					this.SendPropertyChanged("ControllerActiveObjectType");
					this.OnControllerActiveObjectTypeChanged();
				}
			}
		}
		
		[Column(Storage="_IsContent", DbType="Bit")]
		public System.Nullable<bool> IsContent
		{
			get
			{
				return this._IsContent;
			}
			set
			{
				if ((this._IsContent != value))
				{
					this.OnIsContentChanging(value);
					this.SendPropertyChanging();
					this._IsContent = value;
					this.SendPropertyChanged("IsContent");
					this.OnIsContentChanged();
				}
			}
		}
		
		[Column(Storage="_IsContentContainer", DbType="Bit")]
		public System.Nullable<bool> IsContentContainer
		{
			get
			{
				return this._IsContentContainer;
			}
			set
			{
				if ((this._IsContentContainer != value))
				{
					this.OnIsContentContainerChanging(value);
					this.SendPropertyChanging();
					this._IsContentContainer = value;
					this.SendPropertyChanged("IsContentContainer");
					this.OnIsContentContainerChanged();
				}
			}
		}
		
		[Association(Name="ModuleControl_AdminControl", Storage="_AdminControls", OtherKey="ModuleControlID")]
		public EntitySet<AdminControl> AdminControls
		{
			get
			{
				return this._AdminControls;
			}
			set
			{
				this._AdminControls.Assign(value);
			}
		}
		
		[Association(Name="ModuleControl_Controller", Storage="_Controllers", OtherKey="ModuleControlID")]
		public EntitySet<Controller> Controllers
		{
			get
			{
				return this._Controllers;
			}
			set
			{
				this._Controllers.Assign(value);
			}
		}
		
		[Association(Name="ModuleControl_Route", Storage="_Routes", OtherKey="ModuleControlID")]
		public EntitySet<Route> Routes
		{
			get
			{
				return this._Routes;
			}
			set
			{
				this._Routes.Assign(value);
			}
		}
		
		[Association(Name="Module_ModuleControl", Storage="_Module", ThisKey="ModuleID", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.ModuleControls.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.ModuleControls.Add(this);
						this._ModuleID = value.ID;
					}
					else
					{
						this._ModuleID = default(System.Guid);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdminControls(AdminControl entity)
		{
			this.SendPropertyChanging();
			entity.ModuleControl = this;
		}
		
		private void detach_AdminControls(AdminControl entity)
		{
			this.SendPropertyChanging();
			entity.ModuleControl = null;
		}
		
		private void attach_Controllers(Controller entity)
		{
			this.SendPropertyChanging();
			entity.ModuleControl = this;
		}
		
		private void detach_Controllers(Controller entity)
		{
			this.SendPropertyChanging();
			entity.ModuleControl = null;
		}
		
		private void attach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.ModuleControl = this;
		}
		
		private void detach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.ModuleControl = null;
		}
	}
	
	[Table(Name="dbo.Modules")]
	public partial class Module : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Path;
		
		private System.Nullable<System.DateTime> _UpdatedAt;
		
		private EntitySet<ModuleControl> _ModuleControls;
		
		private EntitySet<PermissionFlag> _PermissionFlags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnUpdatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedAtChanged();
    #endregion
		
		public Module()
		{
			this._ModuleControls = new EntitySet<ModuleControl>(new Action<ModuleControl>(this.attach_ModuleControls), new Action<ModuleControl>(this.detach_ModuleControls));
			this._PermissionFlags = new EntitySet<PermissionFlag>(new Action<PermissionFlag>(this.attach_PermissionFlags), new Action<PermissionFlag>(this.detach_PermissionFlags));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedAt
		{
			get
			{
				return this._UpdatedAt;
			}
			set
			{
				if ((this._UpdatedAt != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._UpdatedAt = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[Association(Name="Module_ModuleControl", Storage="_ModuleControls", OtherKey="ModuleID")]
		public EntitySet<ModuleControl> ModuleControls
		{
			get
			{
				return this._ModuleControls;
			}
			set
			{
				this._ModuleControls.Assign(value);
			}
		}
		
		[Association(Name="Module_PermissionFlag", Storage="_PermissionFlags", OtherKey="ModuleID")]
		public EntitySet<PermissionFlag> PermissionFlags
		{
			get
			{
				return this._PermissionFlags;
			}
			set
			{
				this._PermissionFlags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModuleControls(ModuleControl entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_ModuleControls(ModuleControl entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
		
		private void attach_PermissionFlags(PermissionFlag entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_PermissionFlags(PermissionFlag entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
	}
	
	[Table(Name="dbo.Pages")]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _PageNumber;
		
		private System.Guid _ContentItemID;
		
		private System.Nullable<System.Guid> _TextBlockID;
		
		private EntityRef<ContentItem> _ContentItem;
		
		private EntityRef<TextBlock> _TextBlock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPageNumberChanging(int value);
    partial void OnPageNumberChanged();
    partial void OnContentItemIDChanging(System.Guid value);
    partial void OnContentItemIDChanged();
    partial void OnTextBlockIDChanging(System.Nullable<System.Guid> value);
    partial void OnTextBlockIDChanged();
    #endregion
		
		public Page()
		{
			this._ContentItem = default(EntityRef<ContentItem>);
			this._TextBlock = default(EntityRef<TextBlock>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PageNumber", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PageNumber
		{
			get
			{
				return this._PageNumber;
			}
			set
			{
				if ((this._PageNumber != value))
				{
					this.OnPageNumberChanging(value);
					this.SendPropertyChanging();
					this._PageNumber = value;
					this.SendPropertyChanged("PageNumber");
					this.OnPageNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ContentItemID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ContentItemID
		{
			get
			{
				return this._ContentItemID;
			}
			set
			{
				if ((this._ContentItemID != value))
				{
					if (this._ContentItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentItemIDChanging(value);
					this.SendPropertyChanging();
					this._ContentItemID = value;
					this.SendPropertyChanged("ContentItemID");
					this.OnContentItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_TextBlockID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TextBlockID
		{
			get
			{
				return this._TextBlockID;
			}
			set
			{
				if ((this._TextBlockID != value))
				{
					if (this._TextBlock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextBlockIDChanging(value);
					this.SendPropertyChanging();
					this._TextBlockID = value;
					this.SendPropertyChanged("TextBlockID");
					this.OnTextBlockIDChanged();
				}
			}
		}
		
		[Association(Name="ContentItem_Page", Storage="_ContentItem", ThisKey="ContentItemID", IsForeignKey=true)]
		public ContentItem ContentItem
		{
			get
			{
				return this._ContentItem.Entity;
			}
			set
			{
				ContentItem previousValue = this._ContentItem.Entity;
				if (((previousValue != value) 
							|| (this._ContentItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentItem.Entity = null;
						previousValue.Pages.Remove(this);
					}
					this._ContentItem.Entity = value;
					if ((value != null))
					{
						value.Pages.Add(this);
						this._ContentItemID = value.ID;
					}
					else
					{
						this._ContentItemID = default(System.Guid);
					}
					this.SendPropertyChanged("ContentItem");
				}
			}
		}
		
		[Association(Name="TextBlock_Page", Storage="_TextBlock", ThisKey="TextBlockID", IsForeignKey=true)]
		public TextBlock TextBlock
		{
			get
			{
				return this._TextBlock.Entity;
			}
			set
			{
				TextBlock previousValue = this._TextBlock.Entity;
				if (((previousValue != value) 
							|| (this._TextBlock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TextBlock.Entity = null;
						previousValue.Pages.Remove(this);
					}
					this._TextBlock.Entity = value;
					if ((value != null))
					{
						value.Pages.Add(this);
						this._TextBlockID = value.ID;
					}
					else
					{
						this._TextBlockID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("TextBlock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PermissionFlags")]
	public partial class PermissionFlag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Flag;
		
		private System.Guid _ModuleID;
		
		private EntityRef<Module> _Module;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFlagChanging(string value);
    partial void OnFlagChanged();
    partial void OnModuleIDChanging(System.Guid value);
    partial void OnModuleIDChanged();
    #endregion
		
		public PermissionFlag()
		{
			this._Module = default(EntityRef<Module>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Column(Storage="_ModuleID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ModuleID
		{
			get
			{
				return this._ModuleID;
			}
			set
			{
				if ((this._ModuleID != value))
				{
					if (this._Module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleIDChanging(value);
					this.SendPropertyChanging();
					this._ModuleID = value;
					this.SendPropertyChanged("ModuleID");
					this.OnModuleIDChanged();
				}
			}
		}
		
		[Association(Name="Module_PermissionFlag", Storage="_Module", ThisKey="ModuleID", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.PermissionFlags.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.PermissionFlags.Add(this);
						this._ModuleID = value.ID;
					}
					else
					{
						this._ModuleID = default(System.Guid);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Permissions")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ControllerID;
		
		private string _Group;
		
		private string _Flag;
		
		private EntityRef<Controller> _Controller;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnControllerIDChanging(System.Guid value);
    partial void OnControllerIDChanged();
    partial void OnGroupChanging(string value);
    partial void OnGroupChanged();
    partial void OnFlagChanging(string value);
    partial void OnFlagChanged();
    #endregion
		
		public Permission()
		{
			this._Controller = default(EntityRef<Controller>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ControllerID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ControllerID
		{
			get
			{
				return this._ControllerID;
			}
			set
			{
				if ((this._ControllerID != value))
				{
					if (this._Controller.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnControllerIDChanging(value);
					this.SendPropertyChanging();
					this._ControllerID = value;
					this.SendPropertyChanged("ControllerID");
					this.OnControllerIDChanged();
				}
			}
		}
		
		[Column(Name="[Group]", Storage="_Group", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Association(Name="Controller_Permission", Storage="_Controller", ThisKey="ControllerID", IsForeignKey=true)]
		public Controller Controller
		{
			get
			{
				return this._Controller.Entity;
			}
			set
			{
				Controller previousValue = this._Controller.Entity;
				if (((previousValue != value) 
							|| (this._Controller.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Controller.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._Controller.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._ControllerID = value.ContentItemID;
					}
					else
					{
						this._ControllerID = default(System.Guid);
					}
					this.SendPropertyChanged("Controller");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Routes")]
	public partial class Route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Pattern;
		
		private System.Guid _ModuleControlID;
		
		private System.Nullable<int> _Order;
		
		private bool _IsDefault;
		
		private string _Name;
		
		private string _FormatString;
		
		private EntityRef<ModuleControl> _ModuleControl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPatternChanging(string value);
    partial void OnPatternChanged();
    partial void OnModuleControlIDChanging(System.Guid value);
    partial void OnModuleControlIDChanged();
    partial void OnOrderChanging(System.Nullable<int> value);
    partial void OnOrderChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFormatStringChanging(string value);
    partial void OnFormatStringChanged();
    #endregion
		
		public Route()
		{
			this._ModuleControl = default(EntityRef<ModuleControl>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Pattern", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Pattern
		{
			get
			{
				return this._Pattern;
			}
			set
			{
				if ((this._Pattern != value))
				{
					this.OnPatternChanging(value);
					this.SendPropertyChanging();
					this._Pattern = value;
					this.SendPropertyChanged("Pattern");
					this.OnPatternChanged();
				}
			}
		}
		
		[Column(Storage="_ModuleControlID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ModuleControlID
		{
			get
			{
				return this._ModuleControlID;
			}
			set
			{
				if ((this._ModuleControlID != value))
				{
					if (this._ModuleControl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleControlIDChanging(value);
					this.SendPropertyChanging();
					this._ModuleControlID = value;
					this.SendPropertyChanged("ModuleControlID");
					this.OnModuleControlIDChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="Int")]
		public System.Nullable<int> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefault", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_FormatString", DbType="NVarChar(255)")]
		public string FormatString
		{
			get
			{
				return this._FormatString;
			}
			set
			{
				if ((this._FormatString != value))
				{
					this.OnFormatStringChanging(value);
					this.SendPropertyChanging();
					this._FormatString = value;
					this.SendPropertyChanged("FormatString");
					this.OnFormatStringChanged();
				}
			}
		}
		
		[Association(Name="ModuleControl_Route", Storage="_ModuleControl", ThisKey="ModuleControlID", IsForeignKey=true)]
		public ModuleControl ModuleControl
		{
			get
			{
				return this._ModuleControl.Entity;
			}
			set
			{
				ModuleControl previousValue = this._ModuleControl.Entity;
				if (((previousValue != value) 
							|| (this._ModuleControl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ModuleControl.Entity = null;
						previousValue.Routes.Remove(this);
					}
					this._ModuleControl.Entity = value;
					if ((value != null))
					{
						value.Routes.Add(this);
						this._ModuleControlID = value.ID;
					}
					else
					{
						this._ModuleControlID = default(System.Guid);
					}
					this.SendPropertyChanged("ModuleControl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RssFeeds")]
	public partial class RssFeed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Title;
		
		private string _Link;
		
		private string _Description;
		
		private string _ManagingEditor;
		
		private string _ItemFormat;
		
		private string _Slug;
		
		private string _RedirectUrl;
		
		private string _RedirectExceptions;
		
		private System.Nullable<System.Guid> _ControllerID;
		
		private EntityRef<Controller> _Controller;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnManagingEditorChanging(string value);
    partial void OnManagingEditorChanged();
    partial void OnItemFormatChanging(string value);
    partial void OnItemFormatChanged();
    partial void OnSlugChanging(string value);
    partial void OnSlugChanged();
    partial void OnRedirectUrlChanging(string value);
    partial void OnRedirectUrlChanged();
    partial void OnRedirectExceptionsChanging(string value);
    partial void OnRedirectExceptionsChanged();
    partial void OnControllerIDChanging(System.Nullable<System.Guid> value);
    partial void OnControllerIDChanged();
    #endregion
		
		public RssFeed()
		{
			this._Controller = default(EntityRef<Controller>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Link", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ManagingEditor", DbType="NVarChar(255)")]
		public string ManagingEditor
		{
			get
			{
				return this._ManagingEditor;
			}
			set
			{
				if ((this._ManagingEditor != value))
				{
					this.OnManagingEditorChanging(value);
					this.SendPropertyChanging();
					this._ManagingEditor = value;
					this.SendPropertyChanged("ManagingEditor");
					this.OnManagingEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ItemFormat", DbType="NVarChar(MAX)")]
		public string ItemFormat
		{
			get
			{
				return this._ItemFormat;
			}
			set
			{
				if ((this._ItemFormat != value))
				{
					this.OnItemFormatChanging(value);
					this.SendPropertyChanging();
					this._ItemFormat = value;
					this.SendPropertyChanged("ItemFormat");
					this.OnItemFormatChanged();
				}
			}
		}
		
		[Column(Storage="_Slug", DbType="NVarChar(50)")]
		public string Slug
		{
			get
			{
				return this._Slug;
			}
			set
			{
				if ((this._Slug != value))
				{
					this.OnSlugChanging(value);
					this.SendPropertyChanging();
					this._Slug = value;
					this.SendPropertyChanged("Slug");
					this.OnSlugChanged();
				}
			}
		}
		
		[Column(Storage="_RedirectUrl", DbType="NVarChar(255)")]
		public string RedirectUrl
		{
			get
			{
				return this._RedirectUrl;
			}
			set
			{
				if ((this._RedirectUrl != value))
				{
					this.OnRedirectUrlChanging(value);
					this.SendPropertyChanging();
					this._RedirectUrl = value;
					this.SendPropertyChanged("RedirectUrl");
					this.OnRedirectUrlChanged();
				}
			}
		}
		
		[Column(Storage="_RedirectExceptions", DbType="NVarChar(MAX)")]
		public string RedirectExceptions
		{
			get
			{
				return this._RedirectExceptions;
			}
			set
			{
				if ((this._RedirectExceptions != value))
				{
					this.OnRedirectExceptionsChanging(value);
					this.SendPropertyChanging();
					this._RedirectExceptions = value;
					this.SendPropertyChanged("RedirectExceptions");
					this.OnRedirectExceptionsChanged();
				}
			}
		}
		
		[Column(Storage="_ControllerID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ControllerID
		{
			get
			{
				return this._ControllerID;
			}
			set
			{
				if ((this._ControllerID != value))
				{
					if (this._Controller.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnControllerIDChanging(value);
					this.SendPropertyChanging();
					this._ControllerID = value;
					this.SendPropertyChanged("ControllerID");
					this.OnControllerIDChanged();
				}
			}
		}
		
		[Association(Name="Controller_RssFeed", Storage="_Controller", ThisKey="ControllerID", IsForeignKey=true)]
		public Controller Controller
		{
			get
			{
				return this._Controller.Entity;
			}
			set
			{
				Controller previousValue = this._Controller.Entity;
				if (((previousValue != value) 
							|| (this._Controller.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Controller.Entity = null;
						previousValue.RssFeeds.Remove(this);
					}
					this._Controller.Entity = value;
					if ((value != null))
					{
						value.RssFeeds.Add(this);
						this._ControllerID = value.ContentItemID;
					}
					else
					{
						this._ControllerID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Controller");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ScheduledCommands")]
	public partial class ScheduledCommand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.DateTime _RunAt;
		
		private System.Guid _ContentItemID;
		
		private string _Command;
		
		private EntityRef<ContentItem> _ContentItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnRunAtChanging(System.DateTime value);
    partial void OnRunAtChanged();
    partial void OnContentItemIDChanging(System.Guid value);
    partial void OnContentItemIDChanged();
    partial void OnCommandChanging(string value);
    partial void OnCommandChanged();
    #endregion
		
		public ScheduledCommand()
		{
			this._ContentItem = default(EntityRef<ContentItem>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_RunAt", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime RunAt
		{
			get
			{
				return this._RunAt;
			}
			set
			{
				if ((this._RunAt != value))
				{
					this.OnRunAtChanging(value);
					this.SendPropertyChanging();
					this._RunAt = value;
					this.SendPropertyChanged("RunAt");
					this.OnRunAtChanged();
				}
			}
		}
		
		[Column(Storage="_ContentItemID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ContentItemID
		{
			get
			{
				return this._ContentItemID;
			}
			set
			{
				if ((this._ContentItemID != value))
				{
					if (this._ContentItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentItemIDChanging(value);
					this.SendPropertyChanging();
					this._ContentItemID = value;
					this.SendPropertyChanged("ContentItemID");
					this.OnContentItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_Command", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Command
		{
			get
			{
				return this._Command;
			}
			set
			{
				if ((this._Command != value))
				{
					this.OnCommandChanging(value);
					this.SendPropertyChanging();
					this._Command = value;
					this.SendPropertyChanged("Command");
					this.OnCommandChanged();
				}
			}
		}
		
		[Association(Name="ContentItem_ScheduledCommand", Storage="_ContentItem", ThisKey="ContentItemID", IsForeignKey=true)]
		public ContentItem ContentItem
		{
			get
			{
				return this._ContentItem.Entity;
			}
			set
			{
				ContentItem previousValue = this._ContentItem.Entity;
				if (((previousValue != value) 
							|| (this._ContentItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentItem.Entity = null;
						previousValue.ScheduledCommands.Remove(this);
					}
					this._ContentItem.Entity = value;
					if ((value != null))
					{
						value.ScheduledCommands.Add(this);
						this._ContentItemID = value.ID;
					}
					else
					{
						this._ContentItemID = default(System.Guid);
					}
					this.SendPropertyChanged("ContentItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ContentItemID;
		
		private string _Name;
		
		private string _StringValue;
		
		private string _StringValueNormalized;
		
		private double _NumericValue;
		
		private bool _NormalizeStringValue;
		
		private EntityRef<ContentItem> _ContentItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnContentItemIDChanging(System.Guid value);
    partial void OnContentItemIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStringValueChanging(string value);
    partial void OnStringValueChanged();
    partial void OnStringValueNormalizedChanging(string value);
    partial void OnStringValueNormalizedChanged();
    partial void OnNumericValueChanging(double value);
    partial void OnNumericValueChanged();
    partial void OnNormalizeStringValueChanging(bool value);
    partial void OnNormalizeStringValueChanged();
    #endregion
		
		public Tag()
		{
			this._ContentItem = default(EntityRef<ContentItem>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContentItemID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ContentItemID
		{
			get
			{
				return this._ContentItemID;
			}
			set
			{
				if ((this._ContentItemID != value))
				{
					if (this._ContentItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentItemIDChanging(value);
					this.SendPropertyChanging();
					this._ContentItemID = value;
					this.SendPropertyChanged("ContentItemID");
					this.OnContentItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_StringValue", DbType="NVarChar(255)")]
		public string StringValue
		{
			get
			{
				return this._StringValue;
			}
			set
			{
				if ((this._StringValue != value))
				{
					this.OnStringValueChanging(value);
					this.SendPropertyChanging();
					this._StringValue = value;
					this.SendPropertyChanged("StringValue");
					this.OnStringValueChanged();
				}
			}
		}
		
		[Column(Storage="_StringValueNormalized", DbType="NVarChar(255)")]
		public string StringValueNormalized
		{
			get
			{
				return this._StringValueNormalized;
			}
			set
			{
				if ((this._StringValueNormalized != value))
				{
					this.OnStringValueNormalizedChanging(value);
					this.SendPropertyChanging();
					this._StringValueNormalized = value;
					this.SendPropertyChanged("StringValueNormalized");
					this.OnStringValueNormalizedChanged();
				}
			}
		}
		
		[Column(Storage="_NumericValue", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double NumericValue
		{
			get
			{
				return this._NumericValue;
			}
			set
			{
				if ((this._NumericValue != value))
				{
					this.OnNumericValueChanging(value);
					this.SendPropertyChanging();
					this._NumericValue = value;
					this.SendPropertyChanged("NumericValue");
					this.OnNumericValueChanged();
				}
			}
		}
		
		[Column(Storage="_NormalizeStringValue", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool NormalizeStringValue
		{
			get
			{
				return this._NormalizeStringValue;
			}
			set
			{
				if ((this._NormalizeStringValue != value))
				{
					this.OnNormalizeStringValueChanging(value);
					this.SendPropertyChanging();
					this._NormalizeStringValue = value;
					this.SendPropertyChanged("NormalizeStringValue");
					this.OnNormalizeStringValueChanged();
				}
			}
		}
		
		[Association(Name="ContentItem_Tag", Storage="_ContentItem", ThisKey="ContentItemID", IsForeignKey=true)]
		public ContentItem ContentItem
		{
			get
			{
				return this._ContentItem.Entity;
			}
			set
			{
				ContentItem previousValue = this._ContentItem.Entity;
				if (((previousValue != value) 
							|| (this._ContentItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentItem.Entity = null;
						previousValue.Tags.Remove(this);
					}
					this._ContentItem.Entity = value;
					if ((value != null))
					{
						value.Tags.Add(this);
						this._ContentItemID = value.ID;
					}
					else
					{
						this._ContentItemID = default(System.Guid);
					}
					this.SendPropertyChanged("ContentItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Templates")]
	public partial class Template : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Path;
		
		private System.DateTime _UpdatedAt;
		
		private EntitySet<Controller> _Controllers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnUpdatedAtChanging(System.DateTime value);
    partial void OnUpdatedAtChanged();
    #endregion
		
		public Template()
		{
			this._Controllers = new EntitySet<Controller>(new Action<Controller>(this.attach_Controllers), new Action<Controller>(this.detach_Controllers));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedAt", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdatedAt
		{
			get
			{
				return this._UpdatedAt;
			}
			set
			{
				if ((this._UpdatedAt != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._UpdatedAt = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[Association(Name="Template_Controller", Storage="_Controllers", OtherKey="TemplateID")]
		public EntitySet<Controller> Controllers
		{
			get
			{
				return this._Controllers;
			}
			set
			{
				this._Controllers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Controllers(Controller entity)
		{
			this.SendPropertyChanging();
			entity.Template = this;
		}
		
		private void detach_Controllers(Controller entity)
		{
			this.SendPropertyChanging();
			entity.Template = null;
		}
	}
	
	[Table(Name="dbo.UrlRedirects")]
	public partial class UrlRedirect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Url;
		
		private string _PathExtra;
		
		private System.Guid _ContentItemID;
		
		private string _Handler;
		
		private EntityRef<ContentItem> _ContentItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnPathExtraChanging(string value);
    partial void OnPathExtraChanged();
    partial void OnContentItemIDChanging(System.Guid value);
    partial void OnContentItemIDChanged();
    partial void OnHandlerChanging(string value);
    partial void OnHandlerChanged();
    #endregion
		
		public UrlRedirect()
		{
			this._ContentItem = default(EntityRef<ContentItem>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_PathExtra", DbType="NVarChar(255)")]
		public string PathExtra
		{
			get
			{
				return this._PathExtra;
			}
			set
			{
				if ((this._PathExtra != value))
				{
					this.OnPathExtraChanging(value);
					this.SendPropertyChanging();
					this._PathExtra = value;
					this.SendPropertyChanged("PathExtra");
					this.OnPathExtraChanged();
				}
			}
		}
		
		[Column(Storage="_ContentItemID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ContentItemID
		{
			get
			{
				return this._ContentItemID;
			}
			set
			{
				if ((this._ContentItemID != value))
				{
					if (this._ContentItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentItemIDChanging(value);
					this.SendPropertyChanging();
					this._ContentItemID = value;
					this.SendPropertyChanged("ContentItemID");
					this.OnContentItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_Handler", DbType="NVarChar(255)")]
		public string Handler
		{
			get
			{
				return this._Handler;
			}
			set
			{
				if ((this._Handler != value))
				{
					this.OnHandlerChanging(value);
					this.SendPropertyChanging();
					this._Handler = value;
					this.SendPropertyChanged("Handler");
					this.OnHandlerChanged();
				}
			}
		}
		
		[Association(Name="ContentItem_UrlRedirect", Storage="_ContentItem", ThisKey="ContentItemID", IsForeignKey=true)]
		public ContentItem ContentItem
		{
			get
			{
				return this._ContentItem.Entity;
			}
			set
			{
				ContentItem previousValue = this._ContentItem.Entity;
				if (((previousValue != value) 
							|| (this._ContentItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentItem.Entity = null;
						previousValue.UrlRedirects.Remove(this);
					}
					this._ContentItem.Entity = value;
					if ((value != null))
					{
						value.UrlRedirects.Add(this);
						this._ContentItemID = value.ID;
					}
					else
					{
						this._ContentItemID = default(System.Guid);
					}
					this.SendPropertyChanged("ContentItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
