<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MiscUtil</name>
    </assembly>
    <members>
        <member name="T:MiscUtil.Checksum.Adler32">
            <summary>
            Implementation of the Adler32 checksum routine.
            TODO: Derive from HashAlgorithm.
            </summary>
        </member>
        <member name="F:MiscUtil.Checksum.Adler32.Base">
            <summary>
            Base for modulo arithmetic
            </summary>
        </member>
        <member name="F:MiscUtil.Checksum.Adler32.NMax">
            <summary>
            Number of iterations we can safely do before applying the modulo.
            </summary>
        </member>
        <member name="M:MiscUtil.Checksum.Adler32.ComputeChecksum(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the Adler32 checksum for the given data.
            </summary>
            <param name="initial">
            Initial value or previous result. Use 1 for the
            first transformation.
            </param>
            <param name="data">The data to compute the checksum of</param>
            <param name="start">Index of first byte to compute checksum for</param>
            <param name="length">Number of bytes to compute checksum for</param>
            <returns>The checksum of the given data</returns>
        </member>
        <member name="M:MiscUtil.Checksum.Adler32.ComputeChecksum(System.Int32,System.Byte[])">
            <summary>
            Computes the Adler32 checksum for the given data.
            </summary>
            <param name="initial">
            Initial value or previous result. Use 1 for the
            first transformation.
            </param>
            <param name="data">The data to compute the checksum of</param>
            <returns>The checksum of the given data</returns>
        </member>
        <member name="M:MiscUtil.Checksum.Adler32.ComputeChecksum(System.IO.Stream)">
            <summary>
            Computes the checksum for a stream, starting from the current
            position and reading until no more can be read
            </summary>
            <param name="stream">The stream to compute the checksum for</param>
            <returns>The checksum for the stream</returns>
        </member>
        <member name="M:MiscUtil.Checksum.Adler32.ComputeChecksum(System.String)">
            <summary>
            Computes the checksum of a file
            </summary>
            <param name="path">The file to compute the checksum of</param>
            <returns>The checksum for the file</returns>
        </member>
        <member name="T:MiscUtil.Collections.ComparisonComparer`1">
            <summary>
            Utility to build an IComparer implementation from a Comparison delegate,
            and a static method to do the reverse.
            </summary>
        </member>
        <member name="M:MiscUtil.Collections.ComparisonComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Creates a new instance which will proxy to the given Comparison
            delegate when called.
            </summary>
            <param name="comparison">Comparison delegate to proxy to. Must not be null.</param>
        </member>
        <member name="M:MiscUtil.Collections.ComparisonComparer`1.Compare(`0,`0)">
            <summary>
            Implementation of IComparer.Compare which simply proxies
            to the originally specified Comparison delegate.
            </summary>
        </member>
        <member name="M:MiscUtil.Collections.ComparisonComparer`1.CreateComparison(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a Comparison delegate from the given Comparer.
            </summary>
            <param name="comparer">Comparer to use when the returned delegate is called. Must not be null.</param>
            <returns>A Comparison delegate which proxies to the given Comparer.</returns>
        </member>
        <member name="T:MiscUtil.Collections.RandomAccessQueue`1">
            <summary>
            A class with a similar function to System.Collections.Queue,
            but allowing random access to the contents of the queue as well
            as the usual enqueuing at the end and dequeuing at the start.
            This implementation is not synchronized at all - clients should
            provide their own synchronization. A SyncRoot is provided for
            this purpose, although any other common reference may also be used.
            In order to provide an efficient implementation of both random access
            and the removal of items from the start of the queue, a circular
            buffer is used and resized when necessary. The buffer never shrinks
            unless TrimToSize is called.
            </summary>
        </member>
        <member name="F:MiscUtil.Collections.RandomAccessQueue`1.DefaultCapacity">
            <summary>
            Default (and minimum) capacity for the buffer containing the elements in the queue.
            </summary>
        </member>
        <member name="F:MiscUtil.Collections.RandomAccessQueue`1.buffer">
            <summary>
            The circular buffer containing the items in the queue
            </summary>
        </member>
        <member name="F:MiscUtil.Collections.RandomAccessQueue`1.start">
            <summary>
            The "physical" index of item with logical index 0.
            </summary>
        </member>
        <member name="F:MiscUtil.Collections.RandomAccessQueue`1.version">
            <summary>
            Version information for the queue - this is incremented every time
            the contents of the queue is changed, so that enumerators can detect
            the change.
            </summary>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the RandomAccessQueue class which is empty
            and has the specified capacity (or the default capacity if that is higher).
            </summary>
            <param name="capacity">The initial capacity of the queue</param>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.#ctor">
            <summary>
            Initializes a new instance of the RandomAccessQueue class which is empty
            and has the default capacity.
            </summary>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Private constructor used in cloning
            </summary>
            <param name="buffer">The buffer to clone for use in this queue</param>
            <param name="count">The number of "valid" elements in the buffer</param>
            <param name="start">The first valid element in the queue</param>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.Clear">
            <summary>
            Clears the queue without resizing the buffer
            </summary>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.TrimToSize">
            <summary>
            Resizes the buffer to just fit the current number of items in the queue.
            The buffer size is never set to less than the default capacity, however.
            </summary>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.Enqueue(`0)">
            <summary>
            Adds an item to the end of the queue.
            </summary>
            <param name="value">The item to add to the queue. The value can be a null reference.</param>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.Enqueue(`0,System.Int32)">
            <summary>
            Adds an object at the specified index.
            </summary>
            <param name="value">The item to add to the queue. The value can be a null reference.</param>
            <param name="index">The index of the newly added item</param>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.Dequeue">
            <summary>
            Removes an T from the start of the queue, returning it.
            </summary>
            <returns>The item at the head of the queue</returns>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the given index and returns it.
            </summary>
            <param name="index">The index of the item to remove</param>
            <returns>The item which has been removed from the</returns>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the queue to the given array, beginning at
            the specified index in the array.
            </summary>
            <param name="dest">The array to copy the contents of the queue into</param>
            <param name="index">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.BinarySearch(`0)">
            <summary>
            Performs a binary search using IComparable. If the value occurs multiple times,
            there is no guarantee as to which index will be returned. If the value does
            not occur at all, the bitwise complement of the first index containing a larger
            value is returned (or the bitwise complement of the size of the queue if the value
            is larger than any value in the queue). This is the location at which the value should
            be inserted to preserve sort order. If the list is not sorted according to 
            the appropriate IComparable implementation before this method is calling, the result
            is not guaranteed. The value passed in must implement IComparable, unless it is null.
            The IComparable.CompareTo method will be called on the value passed in, with the
            values in the queue as parameters, rather than the other way round. No test is made
            to make sure that the types of item are the same - it is up to the implementation of
            IComparable to throw an exception if incomparable types are presented.
            A null reference is treated as being less than any item, (so passing in null will always 
            return 0 or -1). The implementation of IComparable is never asked to compare to null.
            </summary>
            <param name="obj">The item to search for</param>
            <returns>
            A location in the queue containing the item, or the bitwise complement of the 
            first index containing a larger value.
            </returns>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Performs a binary search using the specified IComparer. If the value occurs multiple times,
            there is no guarantee as to which index will be returned. If the value does
            not occur at all, the bitwise complement of the first index containing a larger
            value is returned (or the bitwise complement of the size of the queue if the value
            is larger than any value in the queue). This is the location at which the value should
            be inserted to preserve sort order. If the list is not sorted according to 
            the appropriate IComparer implementation before this method is calling, the result
            is not guaranteed. The CompareTo method will be called on the comparer passed in, with the
            specified value as the first parameter, and values in the queue as the second parameter, 
            rather than the other way round.
            While a null reference should be treated as being less than any object in most
            implementations of IComparer, this is not required by this method. Any null references
            (whether in the queue or the specified value itself) are passed directly to the CompareTo
            method. This allow for IComparers to reverse the usual order, if required.
            </summary>
            <param name="obj">The object to search for</param>
            <param name="comparer">The comparator to use for searching. Must not be null.</param>
            <returns>
            A location in the queue containing the object, or the bitwise complement of the 
            first index containing a larger value.
            </returns>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.BinarySearch(`0,System.Comparison{`0})">
            <summary>
            Performs a binary search using the specified Comparison. If the value occurs multiple times,
            there is no guarantee as to which index will be returned. If the value does
            not occur at all, the bitwise complement of the first index containing a larger
            value is returned (or the bitwise complement of the size of the queue if the value
            is larger than any value in the queue). This is the location at which the value should
            be inserted to preserve sort order. If the list is not sorted according to 
            the appropriate IComparer implementation before this method is calling, the result
            is not guaranteed. The CompareTo method will be called on the comparer passed in, with the
            specified value as the first parameter, and values in the queue as the second parameter, 
            rather than the other way round.
            While a null reference should be treated as being less than any object in most
            implementations of IComparer, this is not required by this method. Any null references
            (whether in the queue or the specified value itself) are passed directly to the CompareTo
            method. This allow for Comparisons to reverse the usual order, if required.
            </summary>
            <param name="obj">The object to search for</param>
            <param name="comparison">The comparison to use for searching. Must not be null.</param>
            <returns>
            A location in the queue containing the object, or the bitwise complement of the 
            first index containing a larger value.
            </returns>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the queue.
            Note that due to the way C# 2.0 iterators work, we cannot spot changes 
            to the queue after the enumerator was fetched but before MoveNext() is first
            called.
            </summary>
            <returns>Returns an enumerator for the entire queue.</returns>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the queue.
            </summary>
            <returns>Returns an enumerator for the entire queue.</returns>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.System#ICloneable#Clone">
            <summary>
            Creates a new queue with the same contents as this queue.
            The queues are separate, however - adding an item to the returned
            queue doesn't affect the current queue or vice versa.
            A new sync root is also supplied.
            </summary>
            <returns>A clone of the current queue</returns>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.Clone">
            <summary>
            Strongly typed version of ICloneable.Clone. Creates a new queue 
            with the same contents as this queue.
            The queues are separate, however - adding an item to the returned
            queue doesn't affect the current queue or vice versa.
            A new sync root is also supplied.
            </summary>
            <returns>A clone of the current queue</returns>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the queue to a new capacity, optionally leaving a gap at
            a specified logical index so that a new item can be slotted in 
            without further copying
            </summary>
            <param name="newCapacity">The new capacity</param>
            <param name="gapIndex">The logical index at which to insert a gap,
            or -1 for no gap</param>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.Add(`0)">
            <summary>
            Adds an item to the queue
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.Contains(`0)">
            <summary>
            Returns whether or not the queue contains the given item,
            using the default EqualityComparer if the item to find is
            non-null.
            </summary>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the queue to the given array, beginning at
            the specified index in the array.
            </summary>
            <param name="dest">The array to copy the contents of the queue into</param>
            <param name="index">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:MiscUtil.Collections.RandomAccessQueue`1.Remove(`0)">
            <summary>
            Removes the given item from the queue, if it is present. The first
            equal value is removed.
            </summary>
        </member>
        <member name="P:MiscUtil.Collections.RandomAccessQueue`1.Count">
            <summary>
            The number of items in the queue.
            </summary>
        </member>
        <member name="P:MiscUtil.Collections.RandomAccessQueue`1.Item(System.Int32)">
            <summary>
            Indexer for the class, allowing items to be retrieved by
            index and replaced.
            </summary>
        </member>
        <member name="P:MiscUtil.Collections.RandomAccessQueue`1.Capacity">
            <summary>
            Current capacity of the queue - the size of the buffer.
            </summary>
        </member>
        <member name="P:MiscUtil.Collections.RandomAccessQueue`1.SyncRoot">
            <summary>
            An object reference to synchronize on when using the queue
            from multiple threads. This reference isn't used anywhere
            in the class itself. The same reference will always be returned
            for the same queue, and this will never be the same as the reference
            returned for a different queue, even a clone.
            </summary>
        </member>
        <member name="P:MiscUtil.Collections.RandomAccessQueue`1.IsSynchronized">
            <summary>
            Returns false, to indicate that this queue is not synchronized.
            </summary>
        </member>
        <member name="P:MiscUtil.Collections.RandomAccessQueue`1.IsReadOnly">
            <summary>
            Returns false, to indicate that this queue is not read-only.
            </summary>
        </member>
        <member name="T:MiscUtil.Compression.Vcdiff.AddressCache">
            <summary>
            Cache used for encoding/decoding addresses.
            </summary>
        </member>
        <member name="T:MiscUtil.Compression.Vcdiff.CodeTable">
            <summary>
            Table used to encode/decode instructions.
            </summary>
        </member>
        <member name="F:MiscUtil.Compression.Vcdiff.CodeTable.Default">
            <summary>
            Default code table specified in RFC 3284.
            </summary>
        </member>
        <member name="F:MiscUtil.Compression.Vcdiff.CodeTable.entries">
            <summary>
            Array of entries in the code table
            </summary>
        </member>
        <member name="M:MiscUtil.Compression.Vcdiff.CodeTable.BuildDefaultCodeTable">
            <summary>
            Builds the default code table specified in RFC 3284
            </summary>
            <returns>
            The default code table.
            </returns>
        </member>
        <member name="P:MiscUtil.Compression.Vcdiff.CodeTable.Item(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:MiscUtil.Compression.Vcdiff.Instruction">
            <summary>
            Contains the information for a single instruction
            </summary>
        </member>
        <member name="T:MiscUtil.Compression.Vcdiff.InstructionType">
            <summary>
            Enumeration of the different instruction types.
            </summary>
        </member>
        <member name="T:MiscUtil.Compression.Vcdiff.IOHelper">
            <summary>
            A few IO routines to make life easier. Most are basically available
            in EndianBinaryReader, but having them separately here makes VcdiffDecoder
            more easily movable to other places - and no endianness issues are involved in
            the first place.
            </summary>
        </member>
        <member name="M:MiscUtil.Compression.Vcdiff.IOHelper.#ctor">
            <summary>
            Private constructor to prevent instantiation.
            </summary>
        </member>
        <member name="T:MiscUtil.Compression.Vcdiff.VcdiffDecoder">
            <summary>
            Decoder for VCDIFF (RFC 3284) streams.
            </summary>
        </member>
        <member name="F:MiscUtil.Compression.Vcdiff.VcdiffDecoder.original">
            <summary>
            Reader containing original data, if any. May be null.
            If non-null, will be readable and seekable.
            </summary>
        </member>
        <member name="F:MiscUtil.Compression.Vcdiff.VcdiffDecoder.delta">
            <summary>
            Stream containing delta data. Will be readable.
            </summary>
        </member>
        <member name="F:MiscUtil.Compression.Vcdiff.VcdiffDecoder.output">
            <summary>
            Stream containing target data. Will be readable,
            writable and seekable.
            </summary>
        </member>
        <member name="F:MiscUtil.Compression.Vcdiff.VcdiffDecoder.codeTable">
            <summary>
            Code table to use for decoding.
            </summary>
        </member>
        <member name="F:MiscUtil.Compression.Vcdiff.VcdiffDecoder.cache">
            <summary>
            Address cache to use when decoding; must be reset before decoding each window.
            Default to the default size.
            </summary>
        </member>
        <member name="M:MiscUtil.Compression.Vcdiff.VcdiffDecoder.#ctor(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
            <summary>
            Sole constructor; private to prevent instantiation from
            outside the class.
            </summary>
        </member>
        <member name="M:MiscUtil.Compression.Vcdiff.VcdiffDecoder.Decode(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
            <summary>
            Decodes an original stream and a delta stream, writing to a target stream.
            The original stream may be null, so long as the delta stream never
            refers to it. The original and delta streams must be readable, and the
            original stream (if any) and the target stream must be seekable. 
            The target stream must be writable and readable. The original and target
            streams are rewound to their starts before any data is read; the relevant data
            must occur at the beginning of the original stream, and any data already present
            in the target stream may be overwritten. The delta data must begin
            wherever the delta stream is currently positioned. The delta stream must end
            after the last window. The streams are not disposed by this method.
            </summary>
            <param name="original">Stream containing delta. May be null.</param>
            <param name="delta">Stream containing delta data.</param>
            <param name="output">Stream to write resulting data to.</param>
        </member>
        <member name="M:MiscUtil.Compression.Vcdiff.VcdiffDecoder.Decode">
            <summary>
            Top-level decoding method. When this method exits, all decoding has been performed.
            </summary>
        </member>
        <member name="M:MiscUtil.Compression.Vcdiff.VcdiffDecoder.ReadHeader">
            <summary>
            Read the header, including any custom code table. The delta stream is left
            positioned at the start of the first window.
            </summary>
        </member>
        <member name="M:MiscUtil.Compression.Vcdiff.VcdiffDecoder.ReadCodeTable">
            <summary>
            Reads the custom code table, if there is one
            </summary>
        </member>
        <member name="M:MiscUtil.Compression.Vcdiff.VcdiffDecoder.DecodeWindow">
            <summary>
            Reads and decodes a window, returning whether or not there was
            any more data to read.
            </summary>
            <returns>
            Whether or not the delta stream had reached the end of its data.
            </returns>
        </member>
        <member name="T:MiscUtil.Compression.Vcdiff.VcdiffFormatException">
            <summary>
            Summary description for VcdiffFormatException.
            </summary>
        </member>
        <member name="T:MiscUtil.Conversion.BigEndianBitConverter">
            <summary>
            Implementation of EndianBitConverter which converts to/from big-endian
            byte arrays.
            </summary>
        </member>
        <member name="T:MiscUtil.Conversion.EndianBitConverter">
            <summary>
            Equivalent of System.BitConverter, but with either endianness.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            Converts the specified double-precision floating point number to a 
            64-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 64-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            Converts the specified 64-bit signed integer to a double-precision 
            floating point number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A double-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.SingleToInt32Bits(System.Single)">
            <summary>
            Converts the specified single-precision floating point number to a 
            32-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 32-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.Int32BitsToSingle(System.Int32)">
            <summary>
            Converts the specified 32-bit signed integer to a single-precision floating point 
            number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A single-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a Boolean value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            Returns a Unicode character converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A character formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double precision floating point number formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single precision floating point number formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.CheckByteArgument(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the given argument for validity.
            </summary>
            <param name="value">The byte array passed in</param>
            <param name="startIndex">The start index passed in</param>
            <param name="bytesRequired">The number of bytes required</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is less than zero or greater than the length of value minus bytesRequired.
            </exception>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.CheckedFromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the arguments for validity before calling FromBytes
            (which can therefore assume the arguments are valid).
            </summary>
            <param name="value">The bytes to convert after checking</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to convert</param>
            <returns></returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert the given number of bytes from the given array, from the given start
            position, into a long, using the bytes as the least significant part of the long.
            By the time this is called, the arguments have been checked for validity.
            </summary>
            <param name="value">The bytes to convert</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to use in the conversion</param>
            <returns>The converted number</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.ToString(System.Byte[])">
            <summary>
            Returns a String converted from the elements of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <remarks>All the elements of value are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.ToString(System.Byte[],System.Int32)">
            <summary>
            Returns a String converted from the elements of a byte array starting at a specified array position.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <remarks>The elements from array position startIndex to the end of the array are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a String converted from a specified number of bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <param name="length">The number of bytes to convert.</param>
            <remarks>The length elements from array position startIndex are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Returns a decimal value converted from sixteen bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A decimal  formed by sixteen bytes beginning at startIndex.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.GetBytes(System.Decimal)">
            <summary>
            Returns the specified decimal value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 16.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
            <summary>
            Copies the specified decimal value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.GetBytes(System.Int64,System.Int32)">
            <summary>
            Returns an array with the given number of bytes formed
            from the least significant bytes of the specified value.
            This is used to implement the other GetBytes methods.
            </summary>
            <param name="value">The value to get bytes for</param>
            <param name="bytes">The number of significant bytes to return</param>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified Boolean value as an array of bytes.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.GetBytes(System.Char)">
            <summary>
            Returns the specified Unicode character value as an array of bytes.
            </summary>
            <param name="value">A character to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.CopyBytes(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This is used to implement the other CopyBytes methods.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This must be implemented in concrete derived classes, but the implementation
            may assume that the value will fit into the buffer.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Boolean value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A Boolean value.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.CopyBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Unicode character value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.CopyBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Copies the specified double-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.CopyBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.CopyBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.CopyBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.CopyBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Copies the specified single-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="P:MiscUtil.Conversion.EndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="P:MiscUtil.Conversion.EndianBitConverter.Little">
            <summary>
            Returns a little-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="P:MiscUtil.Conversion.EndianBitConverter.Big">
            <summary>
            Returns a big-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="T:MiscUtil.Conversion.EndianBitConverter.Int32SingleUnion">
            <summary>
            Union used solely for the equivalent of DoubleToInt64Bits and vice versa.
            </summary>
        </member>
        <member name="F:MiscUtil.Conversion.EndianBitConverter.Int32SingleUnion.i">
            <summary>
            Int32 version of the value.
            </summary>
        </member>
        <member name="F:MiscUtil.Conversion.EndianBitConverter.Int32SingleUnion.f">
            <summary>
            Single version of the value.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.Int32SingleUnion.#ctor(System.Int32)">
            <summary>
            Creates an instance representing the given integer.
            </summary>
            <param name="i">The integer value of the new instance.</param>
        </member>
        <member name="M:MiscUtil.Conversion.EndianBitConverter.Int32SingleUnion.#ctor(System.Single)">
            <summary>
            Creates an instance representing the given floating point number.
            </summary>
            <param name="f">The floating point value of the new instance.</param>
        </member>
        <member name="P:MiscUtil.Conversion.EndianBitConverter.Int32SingleUnion.AsInt32">
            <summary>
            Returns the value of the instance as an integer.
            </summary>
        </member>
        <member name="P:MiscUtil.Conversion.EndianBitConverter.Int32SingleUnion.AsSingle">
            <summary>
            Returns the value of the instance as a floating point number.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.BigEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.BigEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:MiscUtil.Conversion.BigEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="P:MiscUtil.Conversion.BigEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="T:MiscUtil.Conversion.DoubleConverter">
            <summary>
            A class to allow the conversion of doubles to string representations of
            their exact decimal values. The implementation aims for readability over
            efficiency.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.DoubleConverter.ToExactString(System.Double)">
            <summary>
            Converts the given double to a string representation of its
            exact decimal value.
            </summary>
            <param name="d">The double to convert.</param>
            <returns>A string representation of the double's exact decimal value.</returns>
        </member>
        <member name="T:MiscUtil.Conversion.DoubleConverter.ArbitraryDecimal">
            <summary>
            Private class used for manipulating sequences of decimal digits.
            </summary>
        </member>
        <member name="F:MiscUtil.Conversion.DoubleConverter.ArbitraryDecimal.digits">
            <summary>Digits in the decimal expansion, one byte per digit</summary>
        </member>
        <member name="F:MiscUtil.Conversion.DoubleConverter.ArbitraryDecimal.decimalPoint">
            <summary> 
            How many digits are *after* the decimal point
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.DoubleConverter.ArbitraryDecimal.#ctor(System.Int64)">
            <summary> 
            Constructs an arbitrary decimal expansion from the given long.
            The long must not be negative.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.DoubleConverter.ArbitraryDecimal.MultiplyBy(System.Int32)">
            <summary>
            Multiplies the current expansion by the given amount, which should
            only be 2 or 5.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.DoubleConverter.ArbitraryDecimal.Shift(System.Int32)">
            <summary>
            Shifts the decimal point; a negative value makes
            the decimal expansion bigger (as fewer digits come after the
            decimal place) and a positive value makes the decimal
            expansion smaller.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.DoubleConverter.ArbitraryDecimal.Normalize">
            <summary>
            Removes leading/trailing zeroes from the expansion.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.DoubleConverter.ArbitraryDecimal.ToString">
            <summary>
            Converts the value to a proper decimal string representation.
            </summary>
        </member>
        <member name="T:MiscUtil.Conversion.Endianness">
            <summary>
            Endianness of a converter
            </summary>
        </member>
        <member name="F:MiscUtil.Conversion.Endianness.LittleEndian">
            <summary>
            Little endian - least significant byte first
            </summary>
        </member>
        <member name="F:MiscUtil.Conversion.Endianness.BigEndian">
            <summary>
            Big endian - most significant byte first
            </summary>
        </member>
        <member name="T:MiscUtil.Conversion.LittleEndianBitConverter">
            <summary>
            Implementation of EndianBitConverter which converts to/from little-endian
            byte arrays.
            </summary>
        </member>
        <member name="M:MiscUtil.Conversion.LittleEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="M:MiscUtil.Conversion.LittleEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:MiscUtil.Conversion.LittleEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="P:MiscUtil.Conversion.LittleEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="T:MiscUtil.IO.EndianBinaryReader">
            <summary>
            Equivalent of System.IO.BinaryWriter, but with either endianness, depending on
            the EndianBitConverter it is constructed with. No data is buffered in the
            reader; the client may seek within the stream at will.
            </summary>
        </member>
        <member name="F:MiscUtil.IO.EndianBinaryReader.disposed">
            <summary>
            Whether or not this reader has been disposed yet.
            </summary>
        </member>
        <member name="F:MiscUtil.IO.EndianBinaryReader.decoder">
            <summary>
            Decoder to use for string conversions.
            </summary>
        </member>
        <member name="F:MiscUtil.IO.EndianBinaryReader.buffer">
            <summary>
            Buffer used for temporary storage before conversion into primitives
            </summary>
        </member>
        <member name="F:MiscUtil.IO.EndianBinaryReader.charBuffer">
            <summary>
            Buffer used for temporary storage when reading a single character
            </summary>
        </member>
        <member name="F:MiscUtil.IO.EndianBinaryReader.minBytesPerChar">
            <summary>
            Minimum number of bytes used to encode a character
            </summary>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.#ctor(MiscUtil.Conversion.EndianBitConverter,System.IO.Stream)">
            <summary>
            Equivalent of System.IO.BinaryWriter, but with either endianness, depending on
            the EndianBitConverter it is constructed with.
            </summary>
            <param name="bitConverter">Converter to use when reading data</param>
            <param name="stream">Stream to read data from</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.#ctor(MiscUtil.Conversion.EndianBitConverter,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Constructs a new binary reader with the given bit converter, reading
            to the given stream, using the given encoding.
            </summary>
            <param name="bitConverter">Converter to use when reading data</param>
            <param name="stream">Stream to read data from</param>
            <param name="encoding">Encoding to use when reading character data</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.Close">
            <summary>
            Closes the reader, including the underlying stream..
            </summary>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            Seeks within the stream.
            </summary>
            <param name="offset">Offset to seek to.</param>
            <param name="origin">Origin of seek operation.</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadByte">
            <summary>
            Reads a single byte from the stream.
            </summary>
            <returns>The byte read</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadSByte">
            <summary>
            Reads a single signed byte from the stream.
            </summary>
            <returns>The byte read</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadBoolean">
            <summary>
            Reads a boolean from the stream. 1 byte is read.
            </summary>
            <returns>The boolean read</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadInt16">
            <summary>
            Reads a 16-bit signed integer from the stream, using the bit converter
            for this reader. 2 bytes are read.
            </summary>
            <returns>The 16-bit integer read</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadInt32">
            <summary>
            Reads a 32-bit signed integer from the stream, using the bit converter
            for this reader. 4 bytes are read.
            </summary>
            <returns>The 32-bit integer read</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadInt64">
            <summary>
            Reads a 64-bit signed integer from the stream, using the bit converter
            for this reader. 8 bytes are read.
            </summary>
            <returns>The 64-bit integer read</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadUInt16">
            <summary>
            Reads a 16-bit unsigned integer from the stream, using the bit converter
            for this reader. 2 bytes are read.
            </summary>
            <returns>The 16-bit unsigned integer read</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadUInt32">
            <summary>
            Reads a 32-bit unsigned integer from the stream, using the bit converter
            for this reader. 4 bytes are read.
            </summary>
            <returns>The 32-bit unsigned integer read</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadUInt64">
            <summary>
            Reads a 64-bit unsigned integer from the stream, using the bit converter
            for this reader. 8 bytes are read.
            </summary>
            <returns>The 64-bit unsigned integer read</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadSingle">
            <summary>
            Reads a single-precision floating-point value from the stream, using the bit converter
            for this reader. 4 bytes are read.
            </summary>
            <returns>The floating point value read</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadDouble">
            <summary>
            Reads a double-precision floating-point value from the stream, using the bit converter
            for this reader. 8 bytes are read.
            </summary>
            <returns>The floating point value read</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadDecimal">
            <summary>
            Reads a decimal value from the stream, using the bit converter
            for this reader. 16 bytes are read.
            </summary>
            <returns>The decimal value read</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.Read">
            <summary>
            Reads a single character from the stream, using the character encoding for
            this reader. If no characters have been fully read by the time the stream ends,
            -1 is returned.
            </summary>
            <returns>The character read, or -1 for end of stream.</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads the specified number of characters into the given buffer, starting at
            the given index.
            </summary>
            <param name="data">The buffer to copy data into</param>
            <param name="index">The first index to copy data into</param>
            <param name="count">The number of characters to read</param>
            <returns>The number of characters actually read. This will only be less than
            the requested number of characters if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the specified number of bytes into the given buffer, starting at
            the given index.
            </summary>
            <param name="buffer">The buffer to copy data into</param>
            <param name="index">The first index to copy data into</param>
            <param name="count">The number of bytes to read</param>
            <returns>The number of bytes actually read. This will only be less than
            the requested number of bytes if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadBytes(System.Int32)">
            <summary>
            Reads the specified number of bytes, returning them in a new byte array.
            If not enough bytes are available before the end of the stream, this
            method will return what is available.
            </summary>
            <param name="count">The number of bytes to read</param>
            <returns>The bytes read</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadBytesOrThrow(System.Int32)">
            <summary>
            Reads the specified number of bytes, returning them in a new byte array.
            If not enough bytes are available before the end of the stream, this
            method will throw an IOException.
            </summary>
            <param name="count">The number of bytes to read</param>
            <returns>The bytes read</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.Read7BitEncodedInt">
            <summary>
            Reads a 7-bit encoded integer from the stream. This is stored with the least significant
            information first, with 7 bits of information per byte of value, and the top
            bit as a continuation flag. This method is not affected by the endianness
            of the bit converter.
            </summary>
            <returns>The 7-bit encoded integer read from the stream.</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadBigEndian7BitEncodedInt">
            <summary>
            Reads a 7-bit encoded integer from the stream. This is stored with the most significant
            information first, with 7 bits of information per byte of value, and the top
            bit as a continuation flag. This method is not affected by the endianness
            of the bit converter.
            </summary>
            <returns>The 7-bit encoded integer read from the stream.</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadString">
            <summary>
            Reads a length-prefixed string from the stream, using the encoding for this reader.
            A 7-bit encoded integer is first read, which specifies the number of bytes 
            to read from the stream. These bytes are then converted into a string with
            the encoding for this reader.
            </summary>
            <returns>The string read from the stream.</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.CheckDisposed">
            <summary>
            Checks whether or not the reader has been disposed, throwing an exception if so.
            </summary>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.ReadInternal(System.Byte[],System.Int32)">
            <summary>
            Reads the given number of bytes from the stream, throwing an exception
            if they can't all be read.
            </summary>
            <param name="data">Buffer to read into</param>
            <param name="size">Number of bytes to read</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.TryReadInternal(System.Byte[],System.Int32)">
            <summary>
            Reads the given number of bytes from the stream if possible, returning
            the number of bytes actually read, which may be less than requested if
            (and only if) the end of the stream is reached.
            </summary>
            <param name="data">Buffer to read into</param>
            <param name="size">Number of bytes to read</param>
            <returns>Number of bytes actually read</returns>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryReader.Dispose">
            <summary>
            Disposes of the underlying stream.
            </summary>
        </member>
        <member name="P:MiscUtil.IO.EndianBinaryReader.BitConverter">
            <summary>
            The bit converter used to read values from the stream
            </summary>
        </member>
        <member name="P:MiscUtil.IO.EndianBinaryReader.Encoding">
            <summary>
            The encoding used to read strings
            </summary>
        </member>
        <member name="P:MiscUtil.IO.EndianBinaryReader.BaseStream">
            <summary>
            Gets the underlying stream of the EndianBinaryReader.
            </summary>
        </member>
        <member name="T:MiscUtil.IO.EndianBinaryWriter">
            <summary>
            Equivalent of System.IO.BinaryWriter, but with either endianness, depending on
            the EndianBitConverter it is constructed with.
            </summary>
        </member>
        <member name="F:MiscUtil.IO.EndianBinaryWriter.disposed">
            <summary>
            Whether or not this writer has been disposed yet.
            </summary>
        </member>
        <member name="F:MiscUtil.IO.EndianBinaryWriter.buffer">
            <summary>
            Buffer used for temporary storage during conversion from primitives
            </summary>
        </member>
        <member name="F:MiscUtil.IO.EndianBinaryWriter.charBuffer">
            <summary>
            Buffer used for Write(char)
            </summary>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.#ctor(MiscUtil.Conversion.EndianBitConverter,System.IO.Stream)">
            <summary>
            Constructs a new binary writer with the given bit converter, writing
            to the given stream, using UTF-8 encoding.
            </summary>
            <param name="bitConverter">Converter to use when writing data</param>
            <param name="stream">Stream to write data to</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.#ctor(MiscUtil.Conversion.EndianBitConverter,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Constructs a new binary writer with the given bit converter, writing
            to the given stream, using the given encoding.
            </summary>
            <param name="bitConverter">Converter to use when writing data</param>
            <param name="stream">Stream to write data to</param>
            <param name="encoding">Encoding to use when writing character data</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Close">
            <summary>
            Closes the writer, including the underlying stream.
            </summary>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Flush">
            <summary>
            Flushes the underlying stream.
            </summary>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            Seeks within the stream.
            </summary>
            <param name="offset">Offset to seek to.</param>
            <param name="origin">Origin of seek operation.</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.Boolean)">
            <summary>
            Writes a boolean value to the stream. 1 byte is written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.Int16)">
            <summary>
            Writes a 16-bit signed integer to the stream, using the bit converter
            for this writer. 2 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.Int32)">
            <summary>
            Writes a 32-bit signed integer to the stream, using the bit converter
            for this writer. 4 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.Int64)">
            <summary>
            Writes a 64-bit signed integer to the stream, using the bit converter
            for this writer. 8 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.UInt16)">
            <summary>
            Writes a 16-bit unsigned integer to the stream, using the bit converter
            for this writer. 2 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.UInt32)">
            <summary>
            Writes a 32-bit unsigned integer to the stream, using the bit converter
            for this writer. 4 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.UInt64)">
            <summary>
            Writes a 64-bit unsigned integer to the stream, using the bit converter
            for this writer. 8 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.Single)">
            <summary>
            Writes a single-precision floating-point value to the stream, using the bit converter
            for this writer. 4 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.Double)">
            <summary>
            Writes a double-precision floating-point value to the stream, using the bit converter
            for this writer. 8 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.Decimal)">
            <summary>
            Writes a decimal value to the stream, using the bit converter for this writer.
            16 bytes are written.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.Byte)">
            <summary>
            Writes a signed byte to the stream.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.SByte)">
            <summary>
            Writes an unsigned byte to the stream.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.Byte[])">
            <summary>
            Writes an array of bytes to the stream.
            </summary>
            <param name="value">The values to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a portion of an array of bytes to the stream.
            </summary>
            <param name="value">An array containing the bytes to write</param>
            <param name="offset">The index of the first byte to write within the array</param>
            <param name="count">The number of bytes to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.Char)">
            <summary>
            Writes a single character to the stream, using the encoding for this writer.
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.Char[])">
            <summary>
            Writes an array of characters to the stream, using the encoding for this writer.
            </summary>
            <param name="value">An array containing the characters to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write(System.String)">
            <summary>
            Writes a string to the stream, using the encoding for this writer.
            </summary>
            <param name="value">The value to write. Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">value is null</exception>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Write7BitEncodedInt(System.Int32)">
            <summary>
            Writes a 7-bit encoded integer from the stream. This is stored with the least significant
            information first, with 7 bits of information per byte of value, and the top
            bit as a continuation flag.
            </summary>
            <param name="value">The 7-bit encoded integer to write to the stream</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.CheckDisposed">
            <summary>
            Checks whether or not the writer has been disposed, throwing an exception if so.
            </summary>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.WriteInternal(System.Byte[],System.Int32)">
            <summary>
            Writes the specified number of bytes from the start of the given byte array,
            after checking whether or not the writer has been disposed.
            </summary>
            <param name="bytes">The array of bytes to write from</param>
            <param name="length">The number of bytes to write</param>
        </member>
        <member name="M:MiscUtil.IO.EndianBinaryWriter.Dispose">
            <summary>
            Disposes of the underlying stream.
            </summary>
        </member>
        <member name="P:MiscUtil.IO.EndianBinaryWriter.BitConverter">
            <summary>
            The bit converter used to write values to the stream
            </summary>
        </member>
        <member name="P:MiscUtil.IO.EndianBinaryWriter.Encoding">
            <summary>
            The encoding used to write strings
            </summary>
        </member>
        <member name="P:MiscUtil.IO.EndianBinaryWriter.BaseStream">
            <summary>
            Gets the underlying stream of the EndianBinaryWriter.
            </summary>
        </member>
        <member name="T:MiscUtil.IO.NonClosingStreamWrapper">
            <summary>
            Wraps a stream for all operations except Close and Dispose, which
            merely flush the stream and prevent further operations from being
            carried out using this wrapper.
            </summary>
        </member>
        <member name="M:MiscUtil.IO.NonClosingStreamWrapper.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the class, wrapping the specified stream.
            </summary>
            <param name="stream">The stream to wrap. Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">stream is null</exception>
        </member>
        <member name="F:MiscUtil.IO.NonClosingStreamWrapper.closed">
            <summary>
            Whether this stream has been closed or not
            </summary>
        </member>
        <member name="M:MiscUtil.IO.NonClosingStreamWrapper.CheckClosed">
            <summary>
            Throws an InvalidOperationException if the wrapper is closed.
            </summary>
        </member>
        <member name="M:MiscUtil.IO.NonClosingStreamWrapper.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <param name="buffer">The buffer to read the data into. </param>
            <param name="offset">
            The byte offset in buffer at which to begin writing data read from the stream.
            </param>
            <param name="count">The maximum number of bytes to read. </param>
            <param name="callback">
            An optional asynchronous callback, to be called when the read is complete.
            </param>
            <param name="state">
            A user-provided object that distinguishes this particular 
            asynchronous read request from other requests.
            </param>
            <returns>
            An IAsyncResult that represents the asynchronous read, 
            which could still be pending.
            </returns>
        </member>
        <member name="M:MiscUtil.IO.NonClosingStreamWrapper.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The byte offset in buffer from which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <param name="callback">
            An optional asynchronous callback, to be called when the write is complete.
            </param>
            <param name="state">
            A user-provided object that distinguishes this particular asynchronous 
            write request from other requests.
            </param>
            <returns>
            An IAsyncResult that represents the asynchronous write, 
            which could still be pending.
            </returns>
        </member>
        <member name="M:MiscUtil.IO.NonClosingStreamWrapper.Close">
            <summary>
            This method is not proxied to the underlying stream; instead, the wrapper
            is marked as unusable for other (non-close/Dispose) operations. The underlying
            stream is flushed if the wrapper wasn't closed before this call.
            </summary>
        </member>
        <member name="M:MiscUtil.IO.NonClosingStreamWrapper.CreateObjRef(System.Type)">
            <summary>
            Throws a NotSupportedException.
            </summary>
            <param name="requestedType">The Type of the object that the new ObjRef will reference.</param>
            <returns>n/a</returns>
        </member>
        <member name="M:MiscUtil.IO.NonClosingStreamWrapper.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete.
            </summary>
            <param name="asyncResult">
            The reference to the pending asynchronous request to finish.
            </param>
            <returns>
            The number of bytes read from the stream, between zero (0) 
            and the number of bytes you requested. Streams only return 
            zero (0) at the end of the stream, otherwise, they should 
            block until at least one byte is available.
            </returns>
        </member>
        <member name="M:MiscUtil.IO.NonClosingStreamWrapper.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request.</param>
        </member>
        <member name="M:MiscUtil.IO.NonClosingStreamWrapper.Flush">
            <summary>
            Flushes the underlying stream.
            </summary>
        </member>
        <member name="M:MiscUtil.IO.NonClosingStreamWrapper.InitializeLifetimeService">
            <summary>
            Throws a NotSupportedException.
            </summary>
            <returns>n/a</returns>
        </member>
        <member name="M:MiscUtil.IO.NonClosingStreamWrapper.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the underlying stream and advances the 
            position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains 
            the specified byte array with the values between offset and 
            (offset + count- 1) replaced by the bytes read from the underlying source.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at which to begin storing the data 
            read from the underlying stream.
            </param>
            <param name="count">
            The maximum number of bytes to be read from the 
            underlying stream.
            </param>
            <returns>The total number of bytes read into the buffer. 
            This can be less than the number of bytes requested if that many 
            bytes are not currently available, or zero (0) if the end of the 
            stream has been reached.
            </returns>
        </member>
        <member name="M:MiscUtil.IO.NonClosingStreamWrapper.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the 
            stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:MiscUtil.IO.NonClosingStreamWrapper.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">
            A value of type SeekOrigin indicating the reference 
            point used to obtain the new position.
            </param>
            <returns>The new position within the underlying stream.</returns>
        </member>
        <member name="M:MiscUtil.IO.NonClosingStreamWrapper.SetLength(System.Int64)">
            <summary>
            Sets the length of the underlying stream.
            </summary>
            <param name="value">The desired length of the underlying stream in bytes.</param>
        </member>
        <member name="M:MiscUtil.IO.NonClosingStreamWrapper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the underlying stream and advances 
            the current position within the stream by the number of bytes written.
            </summary>
            <param name="buffer">
            An array of bytes. This method copies count bytes 
            from buffer to the underlying stream.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at 
            which to begin copying bytes to the underlying stream.
            </param>
            <param name="count">The number of bytes to be written to the underlying stream.</param>
        </member>
        <member name="M:MiscUtil.IO.NonClosingStreamWrapper.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and
            advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream. </param>
        </member>
        <member name="P:MiscUtil.IO.NonClosingStreamWrapper.BaseStream">
            <summary>
            Stream wrapped by this wrapper
            </summary>
        </member>
        <member name="P:MiscUtil.IO.NonClosingStreamWrapper.CanRead">
            <summary>
            Indicates whether or not the underlying stream can be read from.
            </summary>
        </member>
        <member name="P:MiscUtil.IO.NonClosingStreamWrapper.CanSeek">
            <summary>
            Indicates whether or not the underlying stream supports seeking.
            </summary>
        </member>
        <member name="P:MiscUtil.IO.NonClosingStreamWrapper.CanWrite">
            <summary>
            Indicates whether or not the underlying stream can be written to.
            </summary>
        </member>
        <member name="P:MiscUtil.IO.NonClosingStreamWrapper.Length">
            <summary>
            Returns the length of the underlying stream.
            </summary>
        </member>
        <member name="P:MiscUtil.IO.NonClosingStreamWrapper.Position">
            <summary>
            Gets or sets the current position in the underlying stream.
            </summary>
        </member>
        <member name="T:MiscUtil.IO.StringWriterWithEncoding">
            <summary>
            A simple class derived from StringWriter, but which allows
            the user to select which Encoding is used. This is most
            likely to be used with XmlTextWriter, which uses the Encoding
            property to determine which encoding to specify in the XML.
            </summary>
        </member>
        <member name="F:MiscUtil.IO.StringWriterWithEncoding.encoding">
            <summary>
            The encoding to return in the Encoding property.
            </summary>
        </member>
        <member name="M:MiscUtil.IO.StringWriterWithEncoding.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the StringWriterWithEncoding class
            with the specified encoding.
            </summary>
            <param name="encoding">The encoding to report.</param>
        </member>
        <member name="M:MiscUtil.IO.StringWriterWithEncoding.#ctor(System.IFormatProvider,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the StringWriter class with the 
            specified format control and encoding.
            </summary>
            <param name="formatProvider">An IFormatProvider object that controls formatting.</param>
            <param name="encoding">The encoding to report.</param>
        </member>
        <member name="M:MiscUtil.IO.StringWriterWithEncoding.#ctor(System.Text.StringBuilder,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the StringWriter class that writes to the
            specified StringBuilder, and reports the specified encoding.
            </summary>
            <param name="sb">The StringBuilder to write to. </param>
            <param name="encoding">The encoding to report.</param>
        </member>
        <member name="M:MiscUtil.IO.StringWriterWithEncoding.#ctor(System.Text.StringBuilder,System.IFormatProvider,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the StringWriter class that writes to the specified 
            StringBuilder, has the specified format provider, and reports the specified encoding.
            </summary>
            <param name="sb">The StringBuilder to write to. </param>
            <param name="formatProvider">An IFormatProvider object that controls formatting.</param>
            <param name="encoding">The encoding to report.</param>
        </member>
        <member name="P:MiscUtil.IO.StringWriterWithEncoding.Encoding">
            <summary>
            Gets the Encoding in which the output is written.
            </summary>
        </member>
        <member name="T:MiscUtil.StaticRandom">
            <summary>
            Thread-safe equivalent of System.Random, using just static methods.
            If all you want is a source of random numbers, this is an easy class to
            use. If you need to specify your own seeds (eg for reproducible sequences
            of numbers), use System.Random.
            </summary>
        </member>
        <member name="M:MiscUtil.StaticRandom.#ctor">
            <summary>
            Private constructor to prevent instantiation.
            </summary>
        </member>
        <member name="M:MiscUtil.StaticRandom.Next">
            <summary>
            Returns a nonnegative random number. 
            </summary>		
            <returns>A 32-bit signed integer greater than or equal to zero and less than Int32.MaxValue.</returns>
        </member>
        <member name="M:MiscUtil.StaticRandom.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum. 
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than maxValue; 
            that is, the range of return values includes zero but not maxValue.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">maxValue is less than zero.</exception>
        </member>
        <member name="M:MiscUtil.StaticRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range. 
            </summary>
            <param name="min">The inclusive lower bound of the random number returned. </param>
            <param name="max">
            The exclusive upper bound of the random number returned. 
            maxValue must be greater than or equal to minValue.
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to minValue and less than maxValue;
            that is, the range of return values includes minValue but not maxValue.
            If minValue equals maxValue, minValue is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">minValue is greater than maxValue.</exception>
        </member>
        <member name="M:MiscUtil.StaticRandom.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:MiscUtil.StaticRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">buffer is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="T:MiscUtil.Text.Utf32String">
            <summary>
            String of UTF-32 characters (ints). This class is immutable, and so is thread-safe
            after copying, but copies must be originally made in a thread-safe manner so as
            to avoid seeing invalid data.
            </summary>
        </member>
        <member name="F:MiscUtil.Text.Utf32String.HashcodeSampleSize">
            <summary>
            Number of samples to take (at most) to form a hash code.
            </summary>
        </member>
        <member name="F:MiscUtil.Text.Utf32String.Empty">
            <summary>
            An empty UTF-32 string.
            </summary>
        </member>
        <member name="F:MiscUtil.Text.Utf32String.characters">
            <summary>
            UTF-32 characters making up the string.
            </summary>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.IsValidUtf32Char(System.Int32)">
            <summary>
            Returns whether or not an integer value is a valid
            UTF-32 character, that is, whether it is non-negative
            and less than or equal to 0x10ffff.
            </summary>
            <param name="value">The value to test.</param>
            <returns>Whether or not the given value is a valid UTF-32 character.</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.#ctor(System.Int32[],System.Boolean)">
            <summary>
            Used inside this class to construct extra strings quickly, when validation
            isn't required.
            </summary>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.#ctor(System.Int32[])">
            <summary>
            Creates a UTF-32 string from an array of integers, all of which must
            be less than 0x10ffff and non-negative.
            </summary>
            <param name="characters"></param>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.#ctor(System.String)">
            <summary>
            Creates a UTF-32 string from a System.String (UTF-16), converting surrogates
            where they are present.
            </summary>
            <param name="utf16">The string in UTF-16 format.</param>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.Substring(System.Int32)">
            <summary>
            Takes a substring of this string, starting at the given index.
            </summary>
            <param name="start">Starting index of desired substring in this string</param>
            <returns>A substring of this string</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.Substring(System.Int32,System.Int32)">
            <summary>
            Takes a substring of this string, starting at the given index
            and containing the given number of characters.
            </summary>
            <param name="start">Starting index of desired substring in this string</param>
            <param name="count">The number of characters in the desired substring</param>
            <returns>A substring of this string</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.IndexOf(MiscUtil.Text.Utf32String)">
            <summary>
            Finds the index of another Utf32String within this one.
            </summary>
            <param name="value">Value to find</param>
            <returns>The index of value within this string, or -1 if it isn't found</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.IndexOf(MiscUtil.Text.Utf32String,System.Int32)">
            <summary>
            Finds the index of another Utf32String within this one,
            starting at the specified position.
            </summary>
            <param name="value">Value to find</param>
            <param name="start">First position to consider when finding value within this Utf32String</param>
            <returns>The index of value within this string, or -1 if it isn't found</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.IndexOf(MiscUtil.Text.Utf32String,System.Int32,System.Int32)">
            <summary>
            Finds the index of another Utf32String within this one,
            starting at the specified position and considering the
            specified number of positions.
            </summary>
            <param name="value">Value to find</param>
            <param name="start">First position to consider when finding value within this Utf32String</param>
            <param name="count">Number of positions to consider</param>
            <returns>The index of value within this string, or -1 if it isn't found</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.IndexOf(System.Int32)">
            <summary>
            Finds the first index of the specified character within this string.
            </summary>
            <param name="character">Character to find</param>
            <returns>The index of the first occurrence of the specified character, or -1
            if it is not found.</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.IndexOf(System.Int32,System.Int32)">
            <summary>
            Finds the first index of the specified character within this string, starting
            at the specified position.
            </summary>
            <param name="character">Character to find</param>
            <param name="start">First position to consider</param>
            <returns>The index of the first occurrence of the specified character, or -1
            if it is not found.</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.IndexOf(System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the first index of the specified character within this string, starting
            at the specified position and considering the specified number of positions.
            </summary>
            <param name="character">Character to find</param>
            <param name="start">First position to consider</param>
            <param name="count">Number of positions to consider</param>
            <returns>The index of the first occurrence of the specified character, or -1
            if it is not found.</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.Equals(MiscUtil.Text.Utf32String)">
            <summary>
            Compares two UTF-32 strings (in a culture-insensitive manner) for equality.
            </summary>
            <param name="other">The other string to compare this one to.</param>
            <returns>Whether or not this string is equal to the other one.</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.Equals(MiscUtil.Text.Utf32String,MiscUtil.Text.Utf32String)">
            <summary>
            Compares one string with another for equality.
            </summary>
            <param name="strA">The first string to compare</param>
            <param name="strB">The second string to compare</param>
            <returns>true if the strings are equivalent; false otherwise</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.Compare(MiscUtil.Text.Utf32String,MiscUtil.Text.Utf32String)">
            <summary>
            Compares the two specified strings.
            </summary>
            <param name="strA">The first string to compare</param>
            <param name="strB">The second string to compare</param>
            <returns>0 if both strings are null or they are equal; a negative number if strA is null or
            is lexicographically before strB; a positive number otherwise</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.Concat(MiscUtil.Text.Utf32String[])">
            <summary>
            Concatenates an array of strings together.
            </summary>
            <param name="strings">The array of strings to concatenate.</param>
            <returns></returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.Concat(MiscUtil.Text.Utf32String,MiscUtil.Text.Utf32String)">
            <summary>
            Returns a concatenation of the given strings.
            </summary>
            <param name="strA">The first string</param>
            <param name="strB">The second string</param>
            <returns>A string consisting of the first string followed by the second</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.Concat(MiscUtil.Text.Utf32String,MiscUtil.Text.Utf32String,MiscUtil.Text.Utf32String)">
            <summary>
            Returns a concatenation of the given strings.
            </summary>
            <param name="strA">The first string</param>
            <param name="strB">The second string</param>
            <param name="strC">The third string</param>
            <returns>
            A string consisting of the first string 
            followed by the second, followed by the third
            </returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.Concat(MiscUtil.Text.Utf32String,MiscUtil.Text.Utf32String,MiscUtil.Text.Utf32String,MiscUtil.Text.Utf32String)">
            <summary>
            Returns a concatenation of the given strings.
            </summary>
            <param name="strA">The first string</param>
            <param name="strB">The second string</param>
            <param name="strC">The third string</param>
            <param name="strD">The fourth string</param>
            <returns>
            A string consisting of the first string 
            followed by the second, followed by the third,
            followed by the fourth
            </returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.ToInt32Array">
            <summary>
            Copies the UTF-32 characters in this string to an int array.
            </summary>
            <returns>An array of integers representing the characters in this array.</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.ToString">
            <summary>
            Converts the UTF-32 string into a UTF-16 string, 
            creating surrogates if necessary.
            </summary>
            <returns>
            A UTF-16 string (System.String) representing the same 
            character data as this UTF-32 string.
            </returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.Equals(System.Object)">
            <summary>
            Returns whether or not this UTF-32 string is equal to another object.
            </summary>
            <param name="obj">The object to compare this UTF-32 string to.</param>
            <returns>Whether or not this object is equal to the other one.</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.GetHashCode">
            <summary>
            Returns a hashcode formed from sampling some of the characters in this
            UTF-32 string. This gives a good balance between performance and hash
            collisions.
            </summary>
            <returns>A hashcode for this UTF-32 string.</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.op_Addition(MiscUtil.Text.Utf32String,MiscUtil.Text.Utf32String)">
            <summary>
            Returns a concatenation of the given strings.
            </summary>
            <param name="strA">The first string</param>
            <param name="strB">The second string</param>
            <returns>A string consisting of the first string followed by the second</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.op_Equality(MiscUtil.Text.Utf32String,MiscUtil.Text.Utf32String)">
            <summary>
            Determines whether two specified String objects have the same value.
            </summary>
            <param name="strA">A string or a null reference</param>
            <param name="strB">A string or a null reference</param>
            <returns>true if the value of strA is the same as the value of strB; otherwise, false</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.op_Inequality(MiscUtil.Text.Utf32String,MiscUtil.Text.Utf32String)">
            <summary>
            Determines whether two specified String objects have different values.
            </summary>
            <param name="strA">A string or a null reference</param>
            <param name="strB">A string or a null reference</param>
            <returns>true if the value of strA is different from the value of strB; otherwise, false</returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.GetEnumerator">
            <summary>
            Enumerates the characters in the string.
            </summary>
            <returns>The enumerator for </returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.CompareTo(System.Object)">
            <summary>
            Compares this string to another Utf32String.
            </summary>
            <param name="obj">The other Utf32String to compare this string to.</param>
            <returns>
            &lt;0 if this string &lt;> obj; 0 if this==object; &gt;0 if this string &gt; obj, 
            with the relation defines in a culture-insensitive way in lexicographic order.
            </returns>
        </member>
        <member name="M:MiscUtil.Text.Utf32String.Clone">
            <summary>
            Creates a shallow copy of this string.
            </summary>
            <returns>A shallow copy of this string.</returns>
        </member>
        <member name="P:MiscUtil.Text.Utf32String.Length">
            <summary>
            The number of UTF-32 characters in this string.
            </summary>
        </member>
        <member name="P:MiscUtil.Text.Utf32String.Item(System.Int32)">
            <summary>
            The character at the specified index.
            </summary>
        </member>
        <member name="T:MiscUtil.Threading.CustomThreadPool">
            <summary>
            A thread pool implementation which allows policy decisions
            for the number of threads to run, etc, to be programatically set.
            </summary>
            <remarks>
            Each instance runs with entirely separate threads, so one thread pool
            cannot "starve" another one of threads, although having lots of threads
            running may mean that some threads are starved of processor time.
            If the values for properties such as MinThreads, IdlePeriod etc are changed
            after threads have been started, it may take some time before their effects
            are noticed. For instance, reducing the idle time from 5 minutes to 1 minute
            will not prevent a thread which had only just started to idle from waiting
            for 5 minutes before dying. Any exceptions thrown in the work item itself
            are handled by the WorkerException event, but all other exceptions are
            propagated to the AppDomain's UnhandledException event. This includes
            exceptions thrown by the BeforeWorkItem and AfterWorkItem events.
            This class is thread-safe - any thread may call any method on any instance of it.
            </remarks>
        </member>
        <member name="F:MiscUtil.Threading.CustomThreadPool.DefaultIdlePeriod">
            <summary>
            Default idle period for new pools
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.CustomThreadPool.DefaultMinThreads">
            <summary>
            Default min threads for new pools
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.CustomThreadPool.DefaultMaxThreads">
            <summary>
            Default max threads for new pools
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.CustomThreadPool.MinWaitPeriod">
            <summary>
            If the idle period is short but we have less than the
            minimum number of threads, idle for this long instead,
            so as to avoid tight-looping. We don't enforce this
            minimum if the thread will die if it idles for its IdlePeriod.
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.CustomThreadPool.MaxWaitPeriod">
            <summary>
            If the idle period is long (or infinite) then we shouldn't
            actually wait that long, just in case the timeout etc changes.
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.CustomThreadPool.staticLock">
            <summary>
            Lock around all static members.
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.CustomThreadPool.instanceCount">
            <summary>
            Total number of instances created
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.#ctor">
            <summary>
            Creates a new thread pool with an autogenerated name.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.#ctor(System.String)">
            <summary>
            Creates a new thread pool with the specified name
            </summary>
            <param name="name">The name of the new thread pool</param>
        </member>
        <member name="F:MiscUtil.Threading.CustomThreadPool.stateLock">
            <summary>
            Lock around access to all state other than events and the queue.
            The queue lock may be acquired within this lock.
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.CustomThreadPool.queueLock">
            <summary>
            Lock for the queue itself. The state lock must not be acquired within
            this lock unless it is already held by the thread.
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.CustomThreadPool.queue">
            <summary>
            The queue itself.
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.CustomThreadPool.threadCounter">
            <summary>
            The number of threads started (in total) by this threadpool.
            Used for naming threads.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.SetMinMaxThreads(System.Int32,System.Int32)">
            <summary>
            Sets both the minimum and maximum number of threads, atomically. This prevents
            exceptions which might occur when setting properties individually (e.g. going
            from (min=5, max=10) to (min=15, max=20), if the minimum were changed first,
            an exception would occur.
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.CustomThreadPool.eventLock">
            <summary>
            Lock around all access to events.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.OnException(MiscUtil.Threading.ThreadPoolWorkItem,System.Exception)">
            <summary>
            Raises the WorkerException event.
            TODO: Write to the event log if no exception handlers are attached?
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.CustomThreadPool.beforeWorkItem">
            <summary>
            Delegate for the BeforeWorkItem event.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.OnBeforeWorkItem(MiscUtil.Threading.ThreadPoolWorkItem,System.Boolean@)">
            <summary>
            Raises the BeforeWorkItem event
            </summary>
            <param name="workItem">The work item which is about to execute</param>
            <param name="cancel">Whether or not the work item was cancelled by an event handler</param>
        </member>
        <member name="F:MiscUtil.Threading.CustomThreadPool.afterWorkItem">
            <summary>
            Delegate for the AfterWorkItem event.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.OnAfterWorkItem(MiscUtil.Threading.ThreadPoolWorkItem)">
            <summary>
            Raises the AfterWorkItem event
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.CustomThreadPool.workerThreadExit">
            <summary>
            Delegate for the ThreadExit event.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.OnWorkerThreadExit">
            <summary>
            Raises the WorkerThreadExit event and decrements the number of total worker threads
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.StartMinThreads">
            <summary>
            Ensures that the pool has at least the minimum number of threads.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.AddWorkItem(System.Delegate,System.Object[])">
            <summary>
            Adds a work item to the queue, starting a new thread if appropriate.
            </summary>
            <param name="workItemDelegate">The delegate representing the work item</param>
            <param name="parameters">The parameters to pass to the delegate</param>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.AddWorkItem(System.Delegate)">
            <summary>
            Adds a work item to the queue, starting a new thread if appropriate.
            </summary>
            <param name="workItemDelegate">The delegate representing the work item.</param>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.AddWorkItem(MiscUtil.Threading.ThreadPoolWorkItem)">
            <summary>
            Adds a work item to the queue and potentially start a new thread.
            A thread is started if there are no idle threads or if there is already
            something on the queue - but in each case, only if the total number of
            threads is less than the maximum.
            </summary>
            <param name="workItem">The actual work item to add to the queue.</param>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.CancelWorkItem(System.Object)">
            <summary>
            Cancels the first work item with the specified ID, if there is one.
            Note that items which have been taken off the queue and are running
            or about to be started cannot be cancelled.
            </summary>
            <param name="id">The ID of the work item to cancel</param>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.CancelAllWorkItems">
            <summary>
            Cancels all work items in the queue.
            Note that items which have been taken off the queue and are running
            or about to be started cannot be cancelled.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.StartWorkerThread">
            <summary>
            Starts a new worker thread.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.WorkerThreadLoop">
            <summary>
            Main worker thread loop. This picks jobs off the queue and executes
            them, until it's time to die.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.CalculateWaitPeriod(System.DateTime)">
            <summary>
            Work out how long to wait for in this iteration. If the thread isn't going
            to die even if the wait completes, make the idle timeout at least MinWaitPeriod
            so we don't end up with lots of threads stealing CPU by checking too often.
            </summary>
            <param name="lastJob">The time this thread last finished executing a work item.</param>
            <returns></returns>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.GetNextWorkItem(System.Int32)">
            <summary>
            Retrieves the next work item from the queue, pausing for at most
            the specified amount of time.
            </summary>
            <param name="waitPeriod">
            The maximum amount of time to wait for a work item to arrive, in ms.
            </param>
            <returns>
            The next work item, or null if there aren't any after waiting
            for the specified period.
            </returns>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.CheckIfThreadShouldQuit(System.DateTime)">
            <summary>
            Checks whether or not this thread should exit, based on the current number
            of threads and the time that this thread last finished executing a work item.
            </summary>
            <param name="lastJob">The time this thread last finished executing a work item.</param>
            <returns>Whether or not the thread is "spare" and should thus quit</returns>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.ExecuteWorkItem(MiscUtil.Threading.ThreadPoolWorkItem)">
            <summary>
            Executes the given work item, firing the BeforeWorkItem and AfterWorkItem events,
            and incrementing and decrementing the number of working threads.
            </summary>
            <param name="job">The work item to execute</param>
        </member>
        <member name="P:MiscUtil.Threading.CustomThreadPool.IdlePeriod">
            <summary>
            How long a thread may be remain idle for before dying, in ms.
            Note that a thread will not die if doing so would
            reduce the number of threads below MinThreads. A value of 0 here
            indicates that threads should not idle at all (except if the number
            of threads would otherwise fall below MinThreads). A value of
            Timeout.Infinite indicates that a thread will idle until a new work item
            is added, however long that is.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.CustomThreadPool.Name">
            <summary>
            Gets the name of the thread pool.
            This is used to set the name of any new threads created by the pool.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.CustomThreadPool.MinThreads">
            <summary>
            The minimum number of threads to leave in the pool. Note that
            the pool may contain fewer threads than this until work items
            have been placed on the queue. A call to StartMinThreads
            will make sure that at least MinThreads threads have been started.
            This value must be non-negative. Note that a MinThreads value of 0
            introduces a possible (although very unlikely) race condition where
            a work item may be added to the queue just as the last thread decides
            to exit. In this case, the work item would not be executed until the
            next work item was added.
            TODO: Try to remove this race condition
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.CustomThreadPool.MaxThreads">
            <summary>
            The maximum number of threads to allow to be in the pool at any
            one time. This value must be greater than or equal to 1.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.CustomThreadPool.QueueLength">
            <summary>
            The number of work items currently awaiting execution.
            This does not include work items currently being executed.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.CustomThreadPool.WorkingThreads">
            <summary>
            The number of threads currently executing work items
            or BeforeWorkItem/AfterWorkItem/WorkerException events.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.CustomThreadPool.TotalThreads">
            <summary>
            The total number of threads in the pool at the present time.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.CustomThreadPool.WorkerThreadPriority">
            <summary>
            The priority of worker threads. Each thread's priority is set
            before the BeforeWorkItem event and after the AfterWorkItem event.
            The priority of an individual thread may be changed in 
            the BeforeWorkItem event, and that changed priority
            will remain active for the duration of the work item itself.
            The default is ThreadPriority.Normal.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.CustomThreadPool.WorkerThreadsAreBackground">
            <summary>
            Whether or not worker threads should be created and
            set as background threads. This is set for the thread before
            the BeforeWorkItem event and after the AfterWorkItem event.
            The background status of a thread may be changed in the BeforeWorkItem
            event, and that changed status will remain active for the duration
            of the work item itself. Default is true.
            </summary>
        </member>
        <member name="E:MiscUtil.Threading.CustomThreadPool.WorkerException">
            <summary>
            Event which is fired if a worker thread throws an exception in
            its work item.
            </summary>
        </member>
        <member name="E:MiscUtil.Threading.CustomThreadPool.BeforeWorkItem">
            <summary>
            Event fired before a worker thread starts a work item.
            </summary>
        </member>
        <member name="E:MiscUtil.Threading.CustomThreadPool.AfterWorkItem">
            <summary>
            Event fired after a worker thread successfully finishes a work item.
            This event is not fired if the work item throws an exception.
            </summary>
        </member>
        <member name="E:MiscUtil.Threading.CustomThreadPool.WorkerThreadExit">
            <summary>
            Event called just before a thread dies.
            </summary>
        </member>
        <member name="T:MiscUtil.Threading.CustomThreadPool.PriorityComparer">
            <summary>
            Comparer which compares an integer priority with the priority of a work item.
            Must only be used in the appropriate order (CompareTo(int, WorkItem)). Also,
            0 is never returned by the method - effectively, the given priority is raised by
            0.5, so that when a binary search is used, the value is never found but the returned
            index is always the bitwise complement of the correct insertion point.
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.CustomThreadPool.PriorityComparer.Instance">
            <summary>
            Access to single instance of PriorityComparer.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.PriorityComparer.#ctor">
            <summary>
            Private constructor to prevent instantiation
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.CustomThreadPool.PriorityComparer.Compare(MiscUtil.Threading.ThreadPoolWorkItem,MiscUtil.Threading.ThreadPoolWorkItem)">
            <summary>
            Implementation of IComparer.Compare - see class remarks for details.
            </summary>
        </member>
        <member name="T:MiscUtil.Threading.ExceptionHandler">
            <summary>
            Delegate for handling exceptions.
            </summary>
        </member>
        <member name="T:MiscUtil.Threading.ThreadPoolExceptionHandler">
            <summary>
            Delegate for handling exceptions thrown by work items executing
            in a custom thread pool.
            </summary>
            <param name="pool">The pool which created the worker thread</param>
            <param name="workItem">The work item which threw the exception</param>
            <param name="e">The exception thrown</param>
            <param name="handled">
            Whether or not the exception has been handled by this delegate. The value
            of this parameter will be false on entry, and changing it to true will
            prevent any further delegates in the event from being executed.
            </param>
        </member>
        <member name="T:MiscUtil.Threading.BeforeWorkItemHandler">
            <summary>
            Delegate for handling the event that a thread is about to execute
            a work item.
            </summary>
            <param name="pool">The pool which created the worker thread</param>
            <param name="workItem">The work item which is about to execute</param>
            <param name="cancel">
            Whether or not the work item should be cancelled. The value
            of this parameter will be false on entry, and changing it to true will
            prevent any further delegates in the event from being executed, and
            prevent the work item itself from being executed.
            </param>
        </member>
        <member name="T:MiscUtil.Threading.AfterWorkItemHandler">
            <summary>
            Delegate for handling the event that a thread has executed a work item.
            </summary>
            <param name="pool">The pool which created the worker thread</param>
            <param name="workItem">The work item which has executed</param>
        </member>
        <member name="T:MiscUtil.Threading.ThreadProgress">
            <summary>
            Delegate for handling the event that a thread has changed state
            (e.g. it's about to execute a work item, it's just executed one, etc).
            Also used for requests for a thread to change state (e.g. if a stop
            request has been received).
            </summary>
        </member>
        <member name="T:MiscUtil.Threading.ControlledThreadStart">
            <summary>
            Represents the method that is executed by a ThreadController.
            </summary>
        </member>
        <member name="T:MiscUtil.Threading.LockOrderException">
            <summary>
            Exception thrown when a Lock method on the SyncLock class times out.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.LockOrderException.#ctor(System.String)">
            <summary>
            Constructs an instance with the specified message.
            </summary>
            <param name="message">The message for the exception</param>
        </member>
        <member name="M:MiscUtil.Threading.LockOrderException.#ctor(System.String,System.Object[])">
            <summary>
            Constructs an instance by formatting the specified message with
            the given parameters.
            </summary>
            <param name="format">The message, which will be formatted with the parameters.</param>
            <param name="args">The parameters to use for formatting.</param>
        </member>
        <member name="T:MiscUtil.Threading.LockTimeoutException">
            <summary>
            Exception thrown when a Lock method on the SyncLock class times out.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.LockTimeoutException.#ctor(System.String)">
            <summary>
            Constructs an instance with the specified message.
            </summary>
            <param name="message">The message for the exception</param>
        </member>
        <member name="M:MiscUtil.Threading.LockTimeoutException.#ctor(System.String,System.Object[])">
            <summary>
            Constructs an instance by formatting the specified message with
            the given parameters.
            </summary>
            <param name="format">The message, which will be formatted with the parameters.</param>
            <param name="args">The parameters to use for formatting.</param>
        </member>
        <member name="T:MiscUtil.Threading.LockToken">
            <summary>
            A lock token returned by a Lock method call on a SyncLock.
            This effectively holds the lock until it is disposed - a 
            slight violation of the IDisposable contract, but it makes
            for easy use of the SyncLock system. This type itself
            is not thread-safe - LockTokens should not be shared between
            threads.
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.LockToken.parent">
            <summary>
            The lock this token has been created by.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.LockToken.#ctor(MiscUtil.Threading.SyncLock)">
            <summary>
            Constructs a new lock token for the specified lock.
            </summary>
            <param name="parent">The internal monitor used for locking.</param>
        </member>
        <member name="M:MiscUtil.Threading.LockToken.Dispose">
            <summary>
            Releases the lock. Subsequent calls to this method do nothing.
            </summary>
        </member>
        <member name="T:MiscUtil.Threading.OrderedLock">
            <summary>
            Class used for locking, as an alternative to just locking on normal monitors.
            Allows for timeouts when locking, and each Lock method returns a token which
            must then be disposed of to release the internal monitor (i.e. to unlock).
            All properties and methods of this class are thread-safe.
            </summary>
        </member>
        <member name="T:MiscUtil.Threading.SyncLock">
            <summary>
            Class used for locking, as an alternative to just locking on normal monitors.
            Allows for timeouts when locking, and each Lock method returns a token which
            must then be disposed of to release the internal monitor (i.e. to unlock).
            All properties and methods of this class are thread-safe.
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.SyncLock.staticLock">
            <summary>
            Lock for static mutable properties.
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.SyncLock.defaultDefaultTimeout">
            <summary>
            The default timeout for new instances of this class
            where the default timeout isn't otherwise specified.
            Defaults to Timeout.Infinite.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.SyncLock.#ctor">
            <summary>
            Creates a new lock with no name, and the default timeout specified by DefaultDefaultTimeout.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.SyncLock.#ctor(System.String)">
            <summary>
            Creates a new lock with the specified name, and the default timeout specified by
            DefaultDefaultTimeout.
            </summary>
            <param name="name">The name of the new lock</param>
        </member>
        <member name="M:MiscUtil.Threading.SyncLock.#ctor(System.Int32)">
            <summary>
            Creates a new lock with no name, and the specified default timeout
            </summary>
            <param name="defaultTimeout">Default timeout, in milliseconds</param>
        </member>
        <member name="M:MiscUtil.Threading.SyncLock.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new lock with the specified name, and an
            infinite default timeout.
            </summary>
            <param name="name">The name of the new lock</param>
            <param name="defaultTimeout">
            Default timeout, in milliseconds. Use Timeout.Infinite
            for an infinite timeout, or a non-negative number otherwise.
            </param>
        </member>
        <member name="M:MiscUtil.Threading.SyncLock.Lock">
            <summary>
            Locks the monitor, with the default timeout.
            </summary>
            <returns>A lock token which should be disposed to release the lock</returns>
            <exception cref="T:MiscUtil.Threading.LockTimeoutException">The operation times out.</exception>
        </member>
        <member name="M:MiscUtil.Threading.SyncLock.Lock(System.TimeSpan)">
            <summary>
            Locks the monitor, with the specified timeout.
            </summary>
            <param name="timeout">The timeout duration. When converted to milliseconds, 
            must be Timeout.Infinite, or non-negative.</param>
            <returns>A lock token which should be disposed to release the lock</returns>
            <exception cref="T:MiscUtil.Threading.LockTimeoutException">The operation times out.</exception>
        </member>
        <member name="M:MiscUtil.Threading.SyncLock.Lock(System.Int32)">
            <summary>
            Locks the monitor, with the specified timeout. Derived classes may override
            this method to change the behaviour; the other calls to Lock all result in
            a call to this method. This implementation checks the validity of the timeout,
            calls Monitor.TryEnter (throwing an exception if appropriate) and returns a
            new LockToken.
            </summary>
            <param name="timeout">The timeout, in milliseconds. Must be Timeout.Infinite,
            or non-negative.</param>
            <returns>A lock token which should be disposed to release the lock</returns>
            <exception cref="T:MiscUtil.Threading.LockTimeoutException">The operation times out.</exception>
        </member>
        <member name="M:MiscUtil.Threading.SyncLock.Unlock">
            <summary>
            Unlocks the monitor. This method may be overridden in derived classes
            to change the behaviour. This implementation simply calls Monitor.Exit.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.SyncLock.DefaultTimeout">
            <summary>
            The default timeout for the 
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.SyncLock.Name">
            <summary>
            The name of this lock.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.SyncLock.Monitor">
            <summary>
            The internal monitor used for locking. While this
            is owned by the thread, it can be used for waiting
            and pulsing in the usual way. Note that manually entering/exiting
            this monitor could result in the lock malfunctioning.
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.OrderedLock.count">
            <summary>
            Lock count (incremented with Lock, decremented with Unlock).
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.OrderedLock.#ctor">
            <summary>
            Creates a new lock with no name, and the default timeout specified by DefaultDefaultTimeout.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.OrderedLock.#ctor(System.String)">
            <summary>
            Creates a new lock with the specified name, and the default timeout specified by
            DefaultDefaultTimeout.
            </summary>
            <param name="name">The name of the new lock</param>
        </member>
        <member name="M:MiscUtil.Threading.OrderedLock.#ctor(System.Int32)">
            <summary>
            Creates a new lock with no name, and the specified default timeout
            </summary>
            <param name="defaultTimeout">Default timeout, in milliseconds</param>
        </member>
        <member name="M:MiscUtil.Threading.OrderedLock.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new lock with the specified name, and an
            infinite default timeout.
            </summary>
            <param name="name">The name of the new lock</param>
            <param name="defaultTimeout">
            Default timeout, in milliseconds. Use Timeout.Infinite
            for an infinite timeout, or a non-negative number otherwise.
            </param>
        </member>
        <member name="M:MiscUtil.Threading.OrderedLock.SetInnerLock(MiscUtil.Threading.OrderedLock)">
            <summary>
            Sets the "inner" lock for this lock, returning this lock. This
            is a convenience method for setting InnerLock as part of a variable
            declaration.
            </summary>
            <example>
            OrderedLock inner = new OrderedLock();
            OrderedLock outer = new OrderedLock().SetInnerLock(inner);
            </example>
            <param name="inner">The inner </param>
            <returns>This lock is returned.</returns>
        </member>
        <member name="M:MiscUtil.Threading.OrderedLock.Lock(System.Int32)">
            <summary>
            Locks the monitor, with the specified timeout. This implementation validates
            the ordering of locks, and maintains the current owner.
            </summary>
            <param name="timeout">The timeout, in milliseconds. Must be Timeout.Infinite,
            or non-negative.</param>
            <returns>A lock token which should be disposed to release the lock</returns>
            <exception cref="T:MiscUtil.Threading.LockTimeoutException">The operation times out.</exception>
            <exception cref="T:MiscUtil.Threading.LockOrderException">
            The lock order would be violated if this lock were taken out. (i.e. attempting
            to acquire the lock could cause deadlock.)
            </exception>
        </member>
        <member name="M:MiscUtil.Threading.OrderedLock.Unlock">
            <summary>
            Unlocks the monitor, decreasing the count and setting the owner to null
            if the count becomes 0.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.OrderedLock.Owner">
            <summary>
            The current owner of the lock, if any.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.OrderedLock.InnerLock">
            <summary>
            Gets or sets the "inner" lock for this lock. This lock must not be acquired
            after the inner one, unless it has already been acquired previously.
            Inner locks are transitive - if A has an inner lock B, and B has
            an inner lock C, then C is also effectively an inner lock of A.
            If this property to null, this lock is considered not to have an inner lock.
            </summary>
        </member>
        <member name="T:MiscUtil.Threading.ThreadController">
            <summary>
            Class designed to control a worker thread (co-operatively).
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.ThreadController.stateLock">
            <summary>
            Lock used throughout for all state management.
            (This is unrelated to the "state" variable.)
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.ThreadController.starter">
            <summary>
            The delegate to be invoked when the thread is started.
            </summary>
        </member>
        <member name="F:MiscUtil.Threading.ThreadController.state">
            <summary>
            State to pass to the "starter" delegate when the thread is started.
            This reference is discarded when the new thread is started, so
            it won't prevent garbage collection.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.ThreadController.#ctor(MiscUtil.Threading.ControlledThreadStart,System.Object)">
            <summary>
            Creates a new controller.
            </summary>
            <param name="starter">The delegate to invoke when the thread is started.
            Must not be null.</param>
            <param name="state">The state to pass to the delegate. May be null.</param>
        </member>
        <member name="M:MiscUtil.Threading.ThreadController.#ctor(MiscUtil.Threading.ControlledThreadStart)">
            <summary>
            Creates a new controller without specifying a state object to
            pass when the delegate is invoked.
            </summary>
            <param name="starter">The delegate to invoke when the thread is started.</param>
        </member>
        <member name="M:MiscUtil.Threading.ThreadController.CreateThread">
            <summary>
            Creates the thread to later be started. This enables
            properties of the thread to be manipulated before the thread
            is started.
            </summary>
            <exception cref="T:System.InvalidOperationException">The thread has already been created.</exception>
        </member>
        <member name="M:MiscUtil.Threading.ThreadController.Start">
            <summary>
            Starts the task in a separate thread, creating it if it hasn't already been
            created with the CreateThread method.
            </summary>
            <exception cref="T:System.InvalidOperationException">The thread has already been started.</exception>
        </member>
        <member name="M:MiscUtil.Threading.ThreadController.Stop">
            <summary>
            Tell the thread being controlled by this controller to stop. 
            This call does not throw an exception if the thread hasn't been 
            created, or has already been told to stop - it is therefore safe 
            to call at any time, regardless of other information about the 
            state of the controller. Depending on the way in which the controlled
            thread is running, it may not take notice of the request to stop
            for some time.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.ThreadController.RunTask">
            <summary>
            Runs the task specified by starter, catching exceptions and propagating them
            to the Exception event.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.ThreadController.Started">
            <summary>
            Whether the thread has been started. A thread can only
            be started once.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.ThreadController.Thread">
            <summary>
            Thread being controlled. May be null if it hasn't
            been created yet.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.ThreadController.Stopping">
            <summary>
            Whether or not the thread is stopping. This may be used
            by the thread itself to test whether or not to stop, as
            well as by clients checking status. To see whether the
            thread has actually finished or not, use the IsAlive
            property of the thread itself.
            </summary>
        </member>
        <member name="E:MiscUtil.Threading.ThreadController.Exception">
            <summary>
            Event raised if the controlled thread throws an unhandled exception.
            The exception is not propagated beyond the controller by default, however
            by adding an ExceptionHandler which simply rethrows the exception,
            it will propagate. Note that in this case any further ExceptionHandlers
            added after the propagating one will not be executed. This event is
            raised in the worker thread.
            </summary>
        </member>
        <member name="E:MiscUtil.Threading.ThreadController.Finished">
            <summary>
            Event raised when the thread has finished and all exception handlers
            have executed (if an exception was raised). Note that this event is
            raised even if one of the exception handlers propagates the exception
            up to the top level. This event is raised in the worker thread.
            </summary>
        </member>
        <member name="E:MiscUtil.Threading.ThreadController.StopRequested">
            <summary>
            Event raised when a stop is requested. Worker threads
            may register for this event to allow them to respond to
            stop requests in a timely manner. The event is raised
            in the thread which calls the Stop method.
            </summary>
        </member>
        <member name="T:MiscUtil.Threading.ThreadPoolWorkItem">
            <summary>
            Class encapsulating an item of work to be executed in a CustomThreadPool.
            </summary>
        </member>
        <member name="M:MiscUtil.Threading.ThreadPoolWorkItem.#ctor(System.Object,System.Boolean,System.Boolean,System.Int32,System.Delegate,System.Object[])">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="id">The ID of the work item. May be null.</param>
            <param name="preserveParameters">
            Whether or not the parameter array should be preserved during the work item's
            execution to allow the information to be retrieved in the WorkerException and
            AfterWorkItem events.
            </param>
            <param name="cloneParameters">
            Whether or not the parameter array provided should be cloned. This should be
            true if the contents of the passed array will be changed by the caller afterwards,
            but false in the common case of creating the array solely for the purpose of
            constructing this work item. Note that the values within the array are not cloned
            - just the array itself.
            </param>
            <param name="priority">The priority of this work item.</param>
            <param name="target">
            The delegate to run when the work item is executed. Must not be null.
            </param>
            <param name="parameters">
            The parameters to pass to the target delegate. May be null if the delegate
            takes no parameters.
            </param>
        </member>
        <member name="M:MiscUtil.Threading.ThreadPoolWorkItem.#ctor(System.Delegate,System.Object[])">
            <summary>
            Creates a new work item with the given target delegate and parameters.
            The parameters (if any) are cloned on construction and preserved during
            the work item's execution. The ID of the constructed work item is null,
            and the priority is 0.
            </summary>
            <param name="target">
            The delegate to run when the work item is executed. Must not be null.
            </param>
            <param name="parameters">
            The parameters to pass to the target delegate. May be null if the delegate
            takes no parameters.
            </param>
        </member>
        <member name="M:MiscUtil.Threading.ThreadPoolWorkItem.Invoke">
            <summary>
            Invokes the work item.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.ThreadPoolWorkItem.Target">
            <summary>
            The target delegate for the work item. This is the delegate
            which is run when the work item is executed.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.ThreadPoolWorkItem.Parameters">
            <summary>
            The parameters passed to the delegate. This may be null,
            and will definitely be null if PreserveParameters is false
            and the work item has started executing. The contents of
            the returned array should not be changed.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.ThreadPoolWorkItem.Priority">
            <summary>
            The priority of this work item compared with others. Note
            that this is entirely independent of the thread priority - it
            serves only to specify the order of execution of a work item.
            Items with a higher priority are added ahead of items with a lower
            priority in the queue.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.ThreadPoolWorkItem.PreserveParameters">
            <summary>
            Whether or not to preserve parameters during and after
            execution. If this is true, the parameters are available in
            the AfterWorkItem and WorkerException events of the containing
            CustomThreadPool. However, this means that the contents cannot 
            be garbage collected until after the work item has finished
            executing, which may be costly in some situations.
            </summary>
        </member>
        <member name="P:MiscUtil.Threading.ThreadPoolWorkItem.ID">
            <summary>
            The ID of the work item, which may be null. This is provided
            by the caller when the work item is constructed, and is used
            for cancellation purposes.
            </summary>
        </member>
    </members>
</doc>
